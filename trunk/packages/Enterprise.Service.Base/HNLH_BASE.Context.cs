//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Enterprise.Service.Base
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HNLH_BASE : DbContext
    {
        public HNLH_BASE()
            : base("name=HNLH_BASE")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<base_account> base_account { get; set; }
        public DbSet<base_aciton> base_aciton { get; set; }
        public DbSet<base_bulletin> base_bulletin { get; set; }
        public DbSet<base_bulletin_items> base_bulletin_items { get; set; }
        public DbSet<base_code> base_code { get; set; }
        public DbSet<base_company> base_company { get; set; }
        public DbSet<base_configset> base_configset { get; set; }
        public DbSet<base_custom_function> base_custom_function { get; set; }
        public DbSet<base_dictionary> base_dictionary { get; set; }
        public DbSet<base_employee> base_employee { get; set; }
        public DbSet<base_enclosure> base_enclosure { get; set; }
        public DbSet<base_icon> base_icon { get; set; }
        public DbSet<base_menu> base_menu { get; set; }
        public DbSet<base_messagerie> base_messagerie { get; set; }
        public DbSet<base_orgnization> base_orgnization { get; set; }
        public DbSet<base_permission> base_permission { get; set; }
        public DbSet<base_province> base_province { get; set; }
        public DbSet<base_role> base_role { get; set; }
        public DbSet<base_sequence> base_sequence { get; set; }
        public DbSet<LHAttachment> LHAttachment { get; set; }
        public DbSet<LHBillFlow> LHBillFlow { get; set; }
        public DbSet<LHBillStatus> LHBillStatus { get; set; }
        public DbSet<LHCommerceLogistics> LHCommerceLogistics { get; set; }
        public DbSet<LHContract> LHContract { get; set; }
        public DbSet<LHContractDetails> LHContractDetails { get; set; }
        public DbSet<LHCustomer> LHCustomer { get; set; }
        public DbSet<LHCustomerAddress> LHCustomerAddress { get; set; }
        public DbSet<LHCustomerFlow> LHCustomerFlow { get; set; }
        public DbSet<LHCustomerLink> LHCustomerLink { get; set; }
        public DbSet<LHCustomerOrg> LHCustomerOrg { get; set; }
        public DbSet<LHCustomerPrice> LHCustomerPrice { get; set; }
        public DbSet<LHCustomerPrice_Log> LHCustomerPrice_Log { get; set; }
        public DbSet<LHDevice> LHDevice { get; set; }
        public DbSet<LHDeviceLog> LHDeviceLog { get; set; }
        public DbSet<LHDispatch> LHDispatch { get; set; }
        public DbSet<LHDispatchCenter> LHDispatchCenter { get; set; }
        public DbSet<LHDispatchCommission> LHDispatchCommission { get; set; }
        public DbSet<LHDispatchCommissionDetails> LHDispatchCommissionDetails { get; set; }
        public DbSet<LHDispatchDetails> LHDispatchDetails { get; set; }
        public DbSet<LHFKOrder> LHFKOrder { get; set; }
        public DbSet<LHFKOrderBanks> LHFKOrderBanks { get; set; }
        public DbSet<LHFKOrderChecked> LHFKOrderChecked { get; set; }
        public DbSet<LHFKOrderCheckedBanks> LHFKOrderCheckedBanks { get; set; }
        public DbSet<LHFKOrderCheckedDetails> LHFKOrderCheckedDetails { get; set; }
        public DbSet<LHFKOrderDetails> LHFKOrderDetails { get; set; }
        public DbSet<LHFSalarySet> LHFSalarySet { get; set; }
        public DbSet<LHInitCustomerAR> LHInitCustomerAR { get; set; }
        public DbSet<LHInitCustomerSupplierBottle> LHInitCustomerSupplierBottle { get; set; }
        public DbSet<LHInitMonth> LHInitMonth { get; set; }
        public DbSet<LHInitMonth_Log> LHInitMonth_Log { get; set; }
        public DbSet<LHInitMonthDetails> LHInitMonthDetails { get; set; }
        public DbSet<LHInitStock> LHInitStock { get; set; }
        public DbSet<LHInitStockExpenses> LHInitStockExpenses { get; set; }
        public DbSet<LHInitStockQty> LHInitStockQty { get; set; }
        public DbSet<LHInitSupplierAP> LHInitSupplierAP { get; set; }
        public DbSet<LHItems> LHItems { get; set; }
        public DbSet<LHItemsFormula> LHItemsFormula { get; set; }
        public DbSet<LHItemsFormula_Log> LHItemsFormula_Log { get; set; }
        public DbSet<LHItemsMapBottle> LHItemsMapBottle { get; set; }
        public DbSet<LHLease> LHLease { get; set; }
        public DbSet<LHLeaseDetails> LHLeaseDetails { get; set; }
        public DbSet<LHLeaseDetails_Log> LHLeaseDetails_Log { get; set; }
        public DbSet<LHLeaseReturn> LHLeaseReturn { get; set; }
        public DbSet<LHLeaseReturnDetails> LHLeaseReturnDetails { get; set; }
        public DbSet<LHLeaseReturnDetails_Log> LHLeaseReturnDetails_Log { get; set; }
        public DbSet<LHLiquidNote> LHLiquidNote { get; set; }
        public DbSet<LHLiquidPlan> LHLiquidPlan { get; set; }
        public DbSet<LHLiquidPlanTask> LHLiquidPlanTask { get; set; }
        public DbSet<LHLiquidPlanTaskDetails> LHLiquidPlanTaskDetails { get; set; }
        public DbSet<LHLiquidRefuel> LHLiquidRefuel { get; set; }
        public DbSet<LHLiquidTo> LHLiquidTo { get; set; }
        public DbSet<LHMonth> LHMonth { get; set; }
        public DbSet<LHName> LHName { get; set; }
        public DbSet<LHNote> LHNote { get; set; }
        public DbSet<LHOilCard> LHOilCard { get; set; }
        public DbSet<LHOilCardDetails> LHOilCardDetails { get; set; }
        public DbSet<LHPassCard> LHPassCard { get; set; }
        public DbSet<LHPassCardDetails> LHPassCardDetails { get; set; }
        public DbSet<LHProject> LHProject { get; set; }
        public DbSet<LHSafeCheck> LHSafeCheck { get; set; }
        public DbSet<LHSalaryDriver> LHSalaryDriver { get; set; }
        public DbSet<LHSalaryDriverSet> LHSalaryDriverSet { get; set; }
        public DbSet<LHSalaryProducerSet> LHSalaryProducerSet { get; set; }
        public DbSet<LHSalarySalesmanSet> LHSalarySalesmanSet { get; set; }
        public DbSet<LHSKOrder> LHSKOrder { get; set; }
        public DbSet<LHSKOrderBanks> LHSKOrderBanks { get; set; }
        public DbSet<LHSKOrderChecked> LHSKOrderChecked { get; set; }
        public DbSet<LHSKOrderCheckedBanks> LHSKOrderCheckedBanks { get; set; }
        public DbSet<LHSKOrderCheckedDetails> LHSKOrderCheckedDetails { get; set; }
        public DbSet<LHStockIn_Log> LHStockIn_Log { get; set; }
        public DbSet<LHStockInDetails> LHStockInDetails { get; set; }
        public DbSet<LHStockInDetails_Log> LHStockInDetails_Log { get; set; }
        public DbSet<LHStockOut_Log> LHStockOut_Log { get; set; }
        public DbSet<LHStockOutDetails> LHStockOutDetails { get; set; }
        public DbSet<LHStockOutDetails_Log> LHStockOutDetails_Log { get; set; }
        public DbSet<LHSubject> LHSubject { get; set; }
        public DbSet<LHSupplier> LHSupplier { get; set; }
        public DbSet<LHSupplierPrice> LHSupplierPrice { get; set; }
        public DbSet<LHSupplierPrice_Log> LHSupplierPrice_Log { get; set; }
        public DbSet<LHTransferAccounts> LHTransferAccounts { get; set; }
        public DbSet<LHTube> LHTube { get; set; }
        public DbSet<LHTubeDetails> LHTubeDetails { get; set; }
        public DbSet<LHTubePlan> LHTubePlan { get; set; }
        public DbSet<LHTubePrice> LHTubePrice { get; set; }
        public DbSet<LHVehicle> LHVehicle { get; set; }
        public DbSet<LHVehicleCard> LHVehicleCard { get; set; }
        public DbSet<LHVehicleEtc> LHVehicleEtc { get; set; }
        public DbSet<LHVehicleTire> LHVehicleTire { get; set; }
        public DbSet<LHWarehouse> LHWarehouse { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<LHBottleDetection> LHBottleDetection { get; set; }
        public DbSet<LHBottleDetectionDetails> LHBottleDetectionDetails { get; set; }
        public DbSet<vm_Bank> vm_Bank { get; set; }
        public DbSet<vm_BankCheakDetails> vm_BankCheakDetails { get; set; }
        public DbSet<vm_BankDetails> vm_BankDetails { get; set; }
        public DbSet<vm_BankFlow> vm_BankFlow { get; set; }
        public DbSet<vm_Bottle> vm_Bottle { get; set; }
        public DbSet<vm_BottlePlant> vm_BottlePlant { get; set; }
        public DbSet<vm_CheckedBanks> vm_CheckedBanks { get; set; }
        public DbSet<vm_ContractDetails> vm_ContractDetails { get; set; }
        public DbSet<vm_contractList> vm_contractList { get; set; }
        public DbSet<vm_CustomerInfo> vm_CustomerInfo { get; set; }
        public DbSet<vm_CustomerPriceHistory> vm_CustomerPriceHistory { get; set; }
        public DbSet<vm_CustomerSell> vm_CustomerSell { get; set; }
        public DbSet<vm_DispatchTask> vm_DispatchTask { get; set; }
        public DbSet<vm_ElectronGas> vm_ElectronGas { get; set; }
        public DbSet<vm_Formula> vm_Formula { get; set; }
        public DbSet<vm_Gas> vm_Gas { get; set; }
        public DbSet<vm_InitCustomerBottle> vm_InitCustomerBottle { get; set; }
        public DbSet<vm_ItemsPrice> vm_ItemsPrice { get; set; }
        public DbSet<vm_LeaseBottleAR> vm_LeaseBottleAR { get; set; }
        public DbSet<vm_LeaseDetails> vm_LeaseDetails { get; set; }
        public DbSet<vm_LeaseDetailsLog> vm_LeaseDetailsLog { get; set; }
        public DbSet<vm_LeaseReturnDetails> vm_LeaseReturnDetails { get; set; }
        public DbSet<vm_LeaseReturnDetailsLog> vm_LeaseReturnDetailsLog { get; set; }
        public DbSet<vm_LiquidMarginRpt> vm_LiquidMarginRpt { get; set; }
        public DbSet<vm_LiquidPlanList> vm_LiquidPlanList { get; set; }
        public DbSet<vm_MonthAP> vm_MonthAP { get; set; }
        public DbSet<vm_MonthAR> vm_MonthAR { get; set; }
        public DbSet<vm_MonthBottle> vm_MonthBottle { get; set; }
        public DbSet<vm_MonthBottleQty> vm_MonthBottleQty { get; set; }
        public DbSet<vm_MonthInitDetails> vm_MonthInitDetails { get; set; }
        public DbSet<vm_MonthItems> vm_MonthItems { get; set; }
        public DbSet<vm_MonthStock> vm_MonthStock { get; set; }
        public DbSet<vm_PassCardDetails> vm_PassCardDetails { get; set; }
        public DbSet<vm_PaymentCheakDetails> vm_PaymentCheakDetails { get; set; }
        public DbSet<vm_PurchaseDetails> vm_PurchaseDetails { get; set; }
        public DbSet<vm_PurchaseItem> vm_PurchaseItem { get; set; }
        public DbSet<vm_QuantitativeWork> vm_QuantitativeWork { get; set; }
        public DbSet<vm_SalesDetails> vm_SalesDetails { get; set; }
        public DbSet<vm_SalesDetailsLog> vm_SalesDetailsLog { get; set; }
        public DbSet<vm_SalesItem> vm_SalesItem { get; set; }
        public DbSet<vm_SalesReturnDetails> vm_SalesReturnDetails { get; set; }
        public DbSet<vm_SalesReturnDetailsLog> vm_SalesReturnDetailsLog { get; set; }
        public DbSet<vm_SetCustomerPrice> vm_SetCustomerPrice { get; set; }
        public DbSet<vm_SetSupplierPrice> vm_SetSupplierPrice { get; set; }
        public DbSet<vm_StockIn> vm_StockIn { get; set; }
        public DbSet<vm_StockInDetails> vm_StockInDetails { get; set; }
        public DbSet<vm_StockOut> vm_StockOut { get; set; }
        public DbSet<vm_StockOutDetails> vm_StockOutDetails { get; set; }
        public DbSet<vm_Subject> vm_Subject { get; set; }
        public DbSet<vm_Supercargo> vm_Supercargo { get; set; }
        public DbSet<vm_TimeoutCustomer> vm_TimeoutCustomer { get; set; }
        public DbSet<vm_TimeoutSupplier> vm_TimeoutSupplier { get; set; }
        public DbSet<vm_TubePlanList> vm_TubePlanList { get; set; }
        public DbSet<vm_TubePrice> vm_TubePrice { get; set; }
        public DbSet<vm_Unit> vm_Unit { get; set; }
        public DbSet<vm_UnitAll> vm_UnitAll { get; set; }
        public DbSet<LHFactor> LHFactor { get; set; }
        public DbSet<LHWaterSpace> LHWaterSpace { get; set; }
        public DbSet<V_CustomerItemPrice> V_CustomerItemPrice { get; set; }
        public DbSet<V_ProducePlacePrice> V_ProducePlacePrice { get; set; }
        public DbSet<V_ProducePlacePriceByMonth> V_ProducePlacePriceByMonth { get; set; }
        public DbSet<LHStockInLiquid> LHStockInLiquid { get; set; }
        public DbSet<vm_ItemsPurchasePrice> vm_ItemsPurchasePrice { get; set; }
        public DbSet<LHProjectItems> LHProjectItems { get; set; }
        public DbSet<LHStockOut> LHStockOut { get; set; }
        public DbSet<LHStockIn> LHStockIn { get; set; }
        public DbSet<vm_DispatchCenter> vm_DispatchCenter { get; set; }
    
        public virtual int proc_Audit(string keyId, string billType, Nullable<int> fCompanyId, string fNum)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var billTypeParameter = billType != null ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fNumParameter = fNum != null ?
                new ObjectParameter("FNum", fNum) :
                new ObjectParameter("FNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Audit", keyIdParameter, billTypeParameter, fCompanyIdParameter, fNumParameter);
        }
    
        public virtual int proc_ClearNum()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ClearNum");
        }
    
        public virtual int proc_CopyLastSales(string code, string keyid, Nullable<int> companyid)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CopyLastSales", codeParameter, keyidParameter, companyidParameter);
        }
    
        public virtual int proc_CopySales(string keyid, string date, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CopySales", keyidParameter, dateParameter, companyidParameter);
        }
    
        public virtual int proc_CopySalesReturn(string keyid, string date, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CopySalesReturn", keyidParameter, dateParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_CustomerARDetails_Result> proc_CustomerARDetails(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CustomerARDetails_Result>("proc_CustomerARDetails", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_CustomerMonthProc_Result> proc_CustomerMonthProc(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fCCCode, string seller)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCCCodeParameter = fCCCode != null ?
                new ObjectParameter("FCCCode", fCCCode) :
                new ObjectParameter("FCCCode", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CustomerMonthProc_Result>("proc_CustomerMonthProc", fDateParameter, companyidParameter, fCCCodeParameter, sellerParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_CustomerPrice(string code, string fItemCode, Nullable<int> companyid)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_CustomerPrice", codeParameter, fItemCodeParameter, companyidParameter);
        }
    
        public virtual int proc_DispatchCenter(string keyid, Nullable<int> companyid, string fVehicleNum, string fDriver, string fSupercargo, string fDispatchNum)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fDispatchNumParameter = fDispatchNum != null ?
                new ObjectParameter("FDispatchNum", fDispatchNum) :
                new ObjectParameter("FDispatchNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DispatchCenter", keyidParameter, companyidParameter, fVehicleNumParameter, fDriverParameter, fSupercargoParameter, fDispatchNumParameter);
        }
    
        public virtual ObjectResult<proc_FinanceAP_Result> proc_FinanceAP(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinanceAP_Result>("proc_FinanceAP", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_FinanceBankSubject_Result> proc_FinanceBankSubject(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinanceBankSubject_Result>("proc_FinanceBankSubject", companyidParameter);
        }
    
        public virtual ObjectResult<proc_FinanceFKChecked_Result> proc_FinanceFKChecked(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinanceFKChecked_Result>("proc_FinanceFKChecked", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_FinancePurchaseChecked_Result> proc_FinancePurchaseChecked(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinancePurchaseChecked_Result>("proc_FinancePurchaseChecked", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_FinanceSaleChecked_Result> proc_FinanceSaleChecked(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinanceSaleChecked_Result>("proc_FinanceSaleChecked", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_FinanceSKChecked_Result> proc_FinanceSKChecked(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinanceSKChecked_Result>("proc_FinanceSKChecked", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_FKOrderAmt(string keyId, Nullable<int> companyid)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_FKOrderAmt", keyIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<string> proc_GetItemBottle(string item, Nullable<int> companyid)
        {
            var itemParameter = item != null ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GetItemBottle", itemParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> proc_getLeaseDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_getLeaseDays");
        }
    
        public virtual int proc_GetRecordByPage(string tblName, string fldName, Nullable<int> pageSize, Nullable<int> pageIndex, Nullable<bool> isReCount, Nullable<bool> orderType, string strWhere)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("tblName", tblName) :
                new ObjectParameter("tblName", typeof(string));
    
            var fldNameParameter = fldName != null ?
                new ObjectParameter("fldName", fldName) :
                new ObjectParameter("fldName", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var isReCountParameter = isReCount.HasValue ?
                new ObjectParameter("IsReCount", isReCount) :
                new ObjectParameter("IsReCount", typeof(bool));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(bool));
    
            var strWhereParameter = strWhere != null ?
                new ObjectParameter("strWhere", strWhere) :
                new ObjectParameter("strWhere", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetRecordByPage", tblNameParameter, fldNameParameter, pageSizeParameter, pageIndexParameter, isReCountParameter, orderTypeParameter, strWhereParameter);
        }
    
        public virtual int proc_GetRecordByPageOrder(string tblName, string viewColumns, string orderColumns, Nullable<int> pageSize, Nullable<int> pageIndex, Nullable<bool> reCount, Nullable<bool> orderType, string where)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("TblName", tblName) :
                new ObjectParameter("TblName", typeof(string));
    
            var viewColumnsParameter = viewColumns != null ?
                new ObjectParameter("ViewColumns", viewColumns) :
                new ObjectParameter("ViewColumns", typeof(string));
    
            var orderColumnsParameter = orderColumns != null ?
                new ObjectParameter("OrderColumns", orderColumns) :
                new ObjectParameter("OrderColumns", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var reCountParameter = reCount.HasValue ?
                new ObjectParameter("ReCount", reCount) :
                new ObjectParameter("ReCount", typeof(bool));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(bool));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetRecordByPageOrder", tblNameParameter, viewColumnsParameter, orderColumnsParameter, pageSizeParameter, pageIndexParameter, reCountParameter, orderTypeParameter, whereParameter);
        }
    
        public virtual ObjectResult<proc_GetTables_Result> proc_GetTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTables_Result>("proc_GetTables");
        }
    
        public virtual ObjectResult<proc_GetTableSize_Result> proc_GetTableSize()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTableSize_Result>("proc_GetTableSize");
        }
    
        public virtual ObjectResult<proc_GetTableStructure_Result> proc_GetTableStructure(string tablename)
        {
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetTableStructure_Result>("proc_GetTableStructure", tablenameParameter);
        }
    
        public virtual int proc_Init()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Init");
        }
    
        public virtual ObjectResult<proc_InitCustomerAR_Result> proc_InitCustomerAR(string fDate, string fName, Nullable<int> companyid)
        {
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_InitCustomerAR_Result>("proc_InitCustomerAR", fDateParameter, fNameParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_LeaseAmt(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_LeaseAmt", keyidParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_LeaseBottleAR_Result> proc_LeaseBottleAR(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseBottleAR_Result>("proc_LeaseBottleAR", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_LeaseBottleARByFCode_Result> proc_LeaseBottleARByFCode(string fCode, Nullable<int> fId, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fIdParameter = fId.HasValue ?
                new ObjectParameter("FId", fId) :
                new ObjectParameter("FId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseBottleARByFCode_Result>("proc_LeaseBottleARByFCode", fCodeParameter, fIdParameter, companyidParameter);
        }
    
        public virtual int proc_LeaseDetails_Log(Nullable<int> fid, string opr, Nullable<int> companyId)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var oprParameter = opr != null ?
                new ObjectParameter("opr", opr) :
                new ObjectParameter("opr", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaseDetails_Log", fidParameter, oprParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<proc_LeaseReturnAmt_Result> proc_LeaseReturnAmt(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseReturnAmt_Result>("proc_LeaseReturnAmt", keyidParameter, companyidParameter);
        }
    
        public virtual int proc_LeaseReturnDetails_Log(Nullable<int> fid, string opr, Nullable<int> companyid)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var oprParameter = opr != null ?
                new ObjectParameter("opr", opr) :
                new ObjectParameter("opr", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaseReturnDetails_Log", fidParameter, oprParameter, companyidParameter);
        }
    
        public virtual int proc_Num(string oldKeyId, string newKeyId, string bill, Nullable<int> companyid)
        {
            var oldKeyIdParameter = oldKeyId != null ?
                new ObjectParameter("oldKeyId", oldKeyId) :
                new ObjectParameter("oldKeyId", typeof(string));
    
            var newKeyIdParameter = newKeyId != null ?
                new ObjectParameter("newKeyId", newKeyId) :
                new ObjectParameter("newKeyId", typeof(string));
    
            var billParameter = bill != null ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Num", oldKeyIdParameter, newKeyIdParameter, billParameter, companyidParameter);
        }
    
        public virtual int proc_Pager(string tBLNAME, string pRIMARYCOLUMNS, Nullable<int> pAGESIZE, Nullable<int> pAGEINDEX, Nullable<bool> oRDERTYPE, string sTRWHERE, ObjectParameter rOWTOTAL)
        {
            var tBLNAMEParameter = tBLNAME != null ?
                new ObjectParameter("TBLNAME", tBLNAME) :
                new ObjectParameter("TBLNAME", typeof(string));
    
            var pRIMARYCOLUMNSParameter = pRIMARYCOLUMNS != null ?
                new ObjectParameter("PRIMARYCOLUMNS", pRIMARYCOLUMNS) :
                new ObjectParameter("PRIMARYCOLUMNS", typeof(string));
    
            var pAGESIZEParameter = pAGESIZE.HasValue ?
                new ObjectParameter("PAGESIZE", pAGESIZE) :
                new ObjectParameter("PAGESIZE", typeof(int));
    
            var pAGEINDEXParameter = pAGEINDEX.HasValue ?
                new ObjectParameter("PAGEINDEX", pAGEINDEX) :
                new ObjectParameter("PAGEINDEX", typeof(int));
    
            var oRDERTYPEParameter = oRDERTYPE.HasValue ?
                new ObjectParameter("ORDERTYPE", oRDERTYPE) :
                new ObjectParameter("ORDERTYPE", typeof(bool));
    
            var sTRWHEREParameter = sTRWHERE != null ?
                new ObjectParameter("STRWHERE", sTRWHERE) :
                new ObjectParameter("STRWHERE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Pager", tBLNAMEParameter, pRIMARYCOLUMNSParameter, pAGESIZEParameter, pAGEINDEXParameter, oRDERTYPEParameter, sTRWHEREParameter, rOWTOTAL);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_PurchaseAmt(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_PurchaseAmt", keyidParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_PurchaseItem_Result> proc_PurchaseItem(string item, Nullable<int> companyid)
        {
            var itemParameter = item != null ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PurchaseItem_Result>("proc_PurchaseItem", itemParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_SalesAmt(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_SalesAmt", keyidParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_SalesItem_Result> proc_SalesItem(string item, Nullable<int> companyid)
        {
            var itemParameter = item != null ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SalesItem_Result>("proc_SalesItem", itemParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_SalesItemByCodes_Result> proc_SalesItemByCodes(string item, Nullable<int> companyid)
        {
            var itemParameter = item != null ?
                new ObjectParameter("item", item) :
                new ObjectParameter("item", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SalesItemByCodes_Result>("proc_SalesItemByCodes", itemParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_SalesReturnAmt(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_SalesReturnAmt", keyidParameter, companyidParameter);
        }
    
        public virtual ObjectResult<string> proc_Sequence(string type, string date, Nullable<int> companyid)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_Sequence", typeParameter, dateParameter, companyidParameter);
        }
    
        public virtual int proc_SequenceOutNum(string type, string date, Nullable<int> companyid, ObjectParameter keyId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_SequenceOutNum", typeParameter, dateParameter, companyidParameter, keyId);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> proc_ServiceDateTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("proc_ServiceDateTime");
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_SKOrderAmt(string keyId, Nullable<int> companyid)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_SKOrderAmt", keyIdParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_StockInDetails_Result> proc_StockInDetails(string keyid, string bill, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_StockInDetails_Result>("proc_StockInDetails", keyidParameter, billParameter, companyidParameter);
        }
    
        public virtual int proc_StockInDetails_Log(Nullable<int> fid, string opr, Nullable<int> companyid)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var oprParameter = opr != null ?
                new ObjectParameter("opr", opr) :
                new ObjectParameter("opr", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_StockInDetails_Log", fidParameter, oprParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_StockOutDetails_Result> proc_StockOutDetails(string keyid, string bill, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var billParameter = bill != null ?
                new ObjectParameter("bill", bill) :
                new ObjectParameter("bill", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_StockOutDetails_Result>("proc_StockOutDetails", keyidParameter, billParameter, companyidParameter);
        }
    
        public virtual int proc_StockOutDetails_Log(Nullable<int> fid, string opr, Nullable<int> companyid)
        {
            var fidParameter = fid.HasValue ?
                new ObjectParameter("fid", fid) :
                new ObjectParameter("fid", typeof(int));
    
            var oprParameter = opr != null ?
                new ObjectParameter("opr", opr) :
                new ObjectParameter("opr", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_StockOutDetails_Log", fidParameter, oprParameter, companyidParameter);
        }
    
        public virtual int proc_Subject(string fCode, string leavl, string fName, string fComment, string fUserCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var leavlParameter = leavl != null ?
                new ObjectParameter("Leavl", leavl) :
                new ObjectParameter("Leavl", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fCommentParameter = fComment != null ?
                new ObjectParameter("FComment", fComment) :
                new ObjectParameter("FComment", typeof(string));
    
            var fUserCodeParameter = fUserCode != null ?
                new ObjectParameter("FUserCode", fUserCode) :
                new ObjectParameter("FUserCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Subject", fCodeParameter, leavlParameter, fNameParameter, fCommentParameter, fUserCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_SupplierAP_Result> proc_SupplierAP(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SupplierAP_Result>("proc_SupplierAP", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_SupplierAPDetails_Result> proc_SupplierAPDetails(string fCode, Nullable<int> companyid)
        {
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SupplierAPDetails_Result>("proc_SupplierAPDetails", fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_SupplierPrice(string code, string fItemCode, Nullable<int> companyid)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_SupplierPrice", codeParameter, fItemCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<report_dayInventory_Result> report_dayInventory(Nullable<System.DateTime> fDate, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_dayInventory_Result>("report_dayInventory", fDateParameter, companyidParameter);
        }
    
        public virtual ObjectResult<report_jxcDetails_Result> report_jxcDetails(Nullable<System.DateTime> fDate, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_jxcDetails_Result>("report_jxcDetails", fDateParameter, companyidParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<proc_Product_Result> proc_Product(string keyid, Nullable<int> companyId, string fCode, Nullable<int> num)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Product_Result>("proc_Product", keyidParameter, companyIdParameter, fCodeParameter, numParameter);
        }
    
        public virtual int proc_AddReturnBottle(string salesKeyId, Nullable<int> companyId, string date, string newKeyId)
        {
            var salesKeyIdParameter = salesKeyId != null ?
                new ObjectParameter("SalesKeyId", salesKeyId) :
                new ObjectParameter("SalesKeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var newKeyIdParameter = newKeyId != null ?
                new ObjectParameter("newKeyId", newKeyId) :
                new ObjectParameter("newKeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddReturnBottle", salesKeyIdParameter, companyIdParameter, dateParameter, newKeyIdParameter);
        }
    
        public virtual int proc_SalesReturnBottle(string salesKeyId, Nullable<int> companyId, string date)
        {
            var salesKeyIdParameter = salesKeyId != null ?
                new ObjectParameter("SalesKeyId", salesKeyId) :
                new ObjectParameter("SalesKeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_SalesReturnBottle", salesKeyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<proc_DispatchCenterDetails_Result> proc_DispatchCenterDetails(string keyid, Nullable<int> companyId)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispatchCenterDetails_Result>("proc_DispatchCenterDetails", keyidParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<string> proc_GetBottle(Nullable<int> companyId, string fName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GetBottle", companyIdParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_SelectorBottle_Result> proc_SelectorBottle(Nullable<int> companyId, Nullable<int> fCateId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SelectorBottle_Result>("proc_SelectorBottle", companyIdParameter, fCateIdParameter);
        }
    
        public virtual ObjectResult<string> proc_SKOrderAuto(string keyId, Nullable<int> companyId, string fCate, string date, string fSKNum)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCateParameter = fCate != null ?
                new ObjectParameter("FCate", fCate) :
                new ObjectParameter("FCate", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var fSKNumParameter = fSKNum != null ?
                new ObjectParameter("FSKNum", fSKNum) :
                new ObjectParameter("FSKNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_SKOrderAuto", keyIdParameter, companyIdParameter, fCateParameter, dateParameter, fSKNumParameter);
        }
    
        public virtual ObjectResult<string> proc_FKOrderAuto(string keyId, Nullable<int> companyId, string fCate, string date, string fSKNum)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCateParameter = fCate != null ?
                new ObjectParameter("FCate", fCate) :
                new ObjectParameter("FCate", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var fSKNumParameter = fSKNum != null ?
                new ObjectParameter("FSKNum", fSKNum) :
                new ObjectParameter("FSKNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_FKOrderAuto", keyIdParameter, companyIdParameter, fCateParameter, dateParameter, fSKNumParameter);
        }
    
        public virtual ObjectResult<proc_SalaryDaySettlement_Result> proc_SalaryDaySettlement(Nullable<int> companyid, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SalaryDaySettlement_Result>("proc_SalaryDaySettlement", companyidParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<proc_SaleNotChecked_Result> proc_SaleNotChecked(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyid)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SaleNotChecked_Result>("proc_SaleNotChecked", beginDateParameter, endDateParameter, companyidParameter);
        }
    
        public virtual ObjectResult<string> proc_SFKLeaseReturnAuto(string keyId, Nullable<int> companyId, string fCate, string date, string fSKNum, string fAbstract)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCateParameter = fCate != null ?
                new ObjectParameter("FCate", fCate) :
                new ObjectParameter("FCate", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var fSKNumParameter = fSKNum != null ?
                new ObjectParameter("FSKNum", fSKNum) :
                new ObjectParameter("FSKNum", typeof(string));
    
            var fAbstractParameter = fAbstract != null ?
                new ObjectParameter("FAbstract", fAbstract) :
                new ObjectParameter("FAbstract", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_SFKLeaseReturnAuto", keyIdParameter, companyIdParameter, fCateParameter, dateParameter, fSKNumParameter, fAbstractParameter);
        }
    
        public virtual ObjectResult<string> proc_SKLeaseAuto(string keyId, Nullable<int> companyId, string fCate, string date, string fSKNum, string fAbstract)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCateParameter = fCate != null ?
                new ObjectParameter("FCate", fCate) :
                new ObjectParameter("FCate", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var fSKNumParameter = fSKNum != null ?
                new ObjectParameter("FSKNum", fSKNum) :
                new ObjectParameter("FSKNum", typeof(string));
    
            var fAbstractParameter = fAbstract != null ?
                new ObjectParameter("FAbstract", fAbstract) :
                new ObjectParameter("FAbstract", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_SKLeaseAuto", keyIdParameter, companyIdParameter, fCateParameter, dateParameter, fSKNumParameter, fAbstractParameter);
        }
    
        public virtual ObjectResult<rpt_BankAmt_Result> rpt_BankAmt(Nullable<int> companyid, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BankAmt_Result>("rpt_BankAmt", companyidParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rpt_BankAmtDetails_Result> rpt_BankAmtDetails(Nullable<int> companyId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string subjectCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var subjectCodeParameter = subjectCode != null ?
                new ObjectParameter("subjectCode", subjectCode) :
                new ObjectParameter("subjectCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BankAmtDetails_Result>("rpt_BankAmtDetails", companyIdParameter, beginDateParameter, endDateParameter, subjectCodeParameter);
        }
    
        public virtual ObjectResult<rpt_BankCheak_Result> rpt_BankCheak(Nullable<int> companyid, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BankCheak_Result>("rpt_BankCheak", companyidParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rpt_dayInventory_Result> rpt_dayInventory(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fName)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_dayInventory_Result>("rpt_dayInventory", fDateParameter, companyidParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_JustintimeInventory_Result> rpt_JustintimeInventory(Nullable<System.DateTime> fDate, string fCateId, string fName, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCateIdParameter = fCateId != null ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_JustintimeInventory_Result>("rpt_JustintimeInventory", fDateParameter, fCateIdParameter, fNameParameter, companyidParameter);
        }
    
        public virtual ObjectResult<rpt_jxcDetails_Result> rpt_jxcDetails(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fName)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_jxcDetails_Result>("rpt_jxcDetails", fDateParameter, companyidParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_PaymentCheck_Result> rpt_PaymentCheck(Nullable<int> companyid, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_PaymentCheck_Result>("rpt_PaymentCheck", companyidParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rpt_SalaryDay_Result> rpt_SalaryDay(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId, string fCode, string fItemCode, string fType)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalaryDay_Result>("rpt_SalaryDay", beginDateParameter, endDateParameter, companyIdParameter, fCodeParameter, fItemCodeParameter, fTypeParameter);
        }
    
        public virtual ObjectResult<rpt_SalaryMonth_Result> rpt_SalaryMonth(Nullable<System.DateTime> fDate, string firstDay, string endDay, Nullable<int> companyid, string fCode, string seller)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var firstDayParameter = firstDay != null ?
                new ObjectParameter("FirstDay", firstDay) :
                new ObjectParameter("FirstDay", typeof(string));
    
            var endDayParameter = endDay != null ?
                new ObjectParameter("EndDay", endDay) :
                new ObjectParameter("EndDay", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalaryMonth_Result>("rpt_SalaryMonth", fDateParameter, firstDayParameter, endDayParameter, companyidParameter, fCodeParameter, sellerParameter);
        }
    
        public virtual ObjectResult<rpt_SalaryRetrunDay_Result> rpt_SalaryRetrunDay(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalaryRetrunDay_Result>("rpt_SalaryRetrunDay", beginDateParameter, endDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<rpt_SalarySKDay_Result> rpt_SalarySKDay(Nullable<int> companyId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string fCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalarySKDay_Result>("rpt_SalarySKDay", companyIdParameter, beginDateParameter, endDateParameter, fCodeParameter);
        }
    
        public virtual ObjectResult<rpt_SKDay_Result> rpt_SKDay(Nullable<int> companyId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SKDay_Result>("rpt_SKDay", companyIdParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int proc_MonthInitQty(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthInitQty", keyidParameter, companyidParameter);
        }
    
        public virtual int proc_ProductionToBottle(string productKeyId, string keyId, Nullable<int> companyId, string date)
        {
            var productKeyIdParameter = productKeyId != null ?
                new ObjectParameter("ProductKeyId", productKeyId) :
                new ObjectParameter("ProductKeyId", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ProductionToBottle", productKeyIdParameter, keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_ProductionToMaterial(string productKeyId, string keyId, Nullable<int> companyId, string date)
        {
            var productKeyIdParameter = productKeyId != null ?
                new ObjectParameter("ProductKeyId", productKeyId) :
                new ObjectParameter("ProductKeyId", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ProductionToMaterial", productKeyIdParameter, keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_ProuctOrder(string keyId, Nullable<int> companyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ProuctOrder", keyIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<proc_WorkProducer_Result> proc_WorkProducer(Nullable<int> companyId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string group)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_WorkProducer_Result>("proc_WorkProducer", companyIdParameter, beginDateParameter, endDateParameter, groupParameter);
        }
    
        public virtual ObjectResult<rpt_SupercargoDay_Result> rpt_SupercargoDay(Nullable<int> companyid, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SupercargoDay_Result>("rpt_SupercargoDay", companyidParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int proc_ContractSubmit(string orderCode, Nullable<int> companyid)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("orderCode", orderCode) :
                new ObjectParameter("orderCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ContractSubmit", orderCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_CustomerMonthBottle_Result> proc_CustomerMonthBottle(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fCode)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CustomerMonthBottle_Result>("proc_CustomerMonthBottle", fDateParameter, companyidParameter, fCodeParameter);
        }
    
        public virtual int proc_GetContractList(string strSQL)
        {
            var strSQLParameter = strSQL != null ?
                new ObjectParameter("strSQL", strSQL) :
                new ObjectParameter("strSQL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetContractList", strSQLParameter);
        }
    
        public virtual ObjectResult<rpt_ParsMonthDetails_Result> rpt_ParsMonthDetails(Nullable<System.DateTime> fDate, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_ParsMonthDetails_Result>("rpt_ParsMonthDetails", fDateParameter, companyidParameter);
        }
    
        public virtual int proc_Month(string fPoint, Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Month", fPointParameter, companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthBottle(Nullable<int> companyId, string month, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthBottle", companyIdParameter, monthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthCustomerBottle(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthCustomerBottle", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthCustomerToInit(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthCustomerToInit", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> proc_MonthDay(Nullable<System.DateTime> fdate)
        {
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("Fdate", fdate) :
                new ObjectParameter("Fdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("proc_MonthDay", fdateParameter);
        }
    
        public virtual int proc_MonthItems(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthItems", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthRecord(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthRecord", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthSupplierBottle(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthSupplierBottle", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthSupplierToInit(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthSupplierToInit", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthAP(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthAP", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthAR(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthAR", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthBottleQty(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthBottleQty", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthR(Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthR", companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_MonthStock_Result> proc_MonthStock(Nullable<int> companyId, string fMonth, string fMonthT, string alterBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var alterByParameter = alterBy != null ?
                new ObjectParameter("alterBy", alterBy) :
                new ObjectParameter("alterBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_MonthStock_Result>("proc_MonthStock", companyIdParameter, fMonthParameter, fMonthTParameter, alterByParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<rpt_SalaryDayCheck_Result> rpt_SalaryDayCheck(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalaryDayCheck_Result>("rpt_SalaryDayCheck", beginDateParameter, endDateParameter, companyIdParameter);
        }
    
        public virtual int proc_DeleteFlag(string keyId, Nullable<int> companyId, Nullable<int> bill)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("keyId", keyId) :
                new ObjectParameter("keyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billParameter = bill.HasValue ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DeleteFlag", keyIdParameter, companyIdParameter, billParameter);
        }
    
        public virtual int proc_UnitAllBottle(Nullable<int> companyId, string begin, string end, string fCode, string fBottle, string fName, string fBottleName, string fSalesman)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fBottleNameParameter = fBottleName != null ?
                new ObjectParameter("FBottleName", fBottleName) :
                new ObjectParameter("FBottleName", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UnitAllBottle", companyIdParameter, beginParameter, endParameter, fCodeParameter, fBottleParameter, fNameParameter, fBottleNameParameter, fSalesmanParameter);
        }
    
        public virtual ObjectResult<rpt_StockIn_Result> rpt_StockIn(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId, Nullable<int> bill, string fCode, string fName, string createBy, string keyId, string fItemCode, string fItemName)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billParameter = bill.HasValue ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("createBy", createBy) :
                new ObjectParameter("createBy", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StockIn_Result>("rpt_StockIn", beginDateParameter, endDateParameter, companyIdParameter, billParameter, fCodeParameter, fNameParameter, createByParameter, keyIdParameter, fItemCodeParameter, fItemNameParameter);
        }
    
        public virtual ObjectResult<rpt_StockInDetails_Result> rpt_StockInDetails(string keyId, Nullable<int> companyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("keyId", keyId) :
                new ObjectParameter("keyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StockInDetails_Result>("rpt_StockInDetails", keyIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<rpt_StockOut_Result> rpt_StockOut(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId, Nullable<int> bill, string fCode, string fName, string createBy, string keyId, string fItemCode, string fItemName)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billParameter = bill.HasValue ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("createBy", createBy) :
                new ObjectParameter("createBy", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StockOut_Result>("rpt_StockOut", beginDateParameter, endDateParameter, companyIdParameter, billParameter, fCodeParameter, fNameParameter, createByParameter, keyIdParameter, fItemCodeParameter, fItemNameParameter);
        }
    
        public virtual ObjectResult<rpt_StockOutDetails_Result> rpt_StockOutDetails(string keyId, Nullable<int> companyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("keyId", keyId) :
                new ObjectParameter("keyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StockOutDetails_Result>("rpt_StockOutDetails", keyIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<proc_PrintPurchase_Result> proc_PrintPurchase(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintPurchase_Result>("proc_PrintPurchase", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintPurchaseReturn_Result> proc_PrintPurchaseReturn(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintPurchaseReturn_Result>("proc_PrintPurchaseReturn", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintSales_Result> proc_PrintSales(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintSales_Result>("proc_PrintSales", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintSalesReturn_Result> proc_PrintSalesReturn(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintSalesReturn_Result>("proc_PrintSalesReturn", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintAllot_Result> proc_PrintAllot(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintAllot_Result>("proc_PrintAllot", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintAllotDept_Result> proc_PrintAllotDept(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintAllotDept_Result>("proc_PrintAllotDept", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintLease_Result> proc_PrintLease(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintLease_Result>("proc_PrintLease", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintLeaseReturn_Result> proc_PrintLeaseReturn(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintLeaseReturn_Result>("proc_PrintLeaseReturn", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintLosses_Result> proc_PrintLosses(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintLosses_Result>("proc_PrintLosses", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintProduction_Result> proc_PrintProduction(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintProduction_Result>("proc_PrintProduction", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintProfit_Result> proc_PrintProfit(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintProfit_Result>("proc_PrintProfit", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_ProductionMaterial_Result> proc_ProductionMaterial(Nullable<int> companyId, string keyid)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ProductionMaterial_Result>("proc_ProductionMaterial", companyIdParameter, keyidParameter);
        }
    
        public virtual ObjectResult<proc_LeaseKill_Result> proc_LeaseKill(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseKill_Result>("proc_LeaseKill", keyidParameter, companyidParameter);
        }
    
        public virtual int proc_LeaseKillSK(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaseKillSK", keyidParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_DispatchCommission_Result> proc_DispatchCommission(Nullable<int> companyId, string fDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispatchCommission_Result>("proc_DispatchCommission", companyIdParameter, fDateParameter);
        }
    
        public virtual int proc_InitBase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InitBase");
        }
    
        public virtual int proc_LiquidPlan(Nullable<int> companyId, string keyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlan", companyIdParameter, keyIdParameter);
        }
    
        public virtual int proc_LiquidPlanPurchase(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlanPurchase", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_LiquidPlanSales1(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlanSales1", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_LiquidPlanSales2(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlanSales2", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_LiquidPlanSales3(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlanSales3", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<proc_LiquidPlanList_Result> proc_LiquidPlanList(Nullable<int> companyId, string keyId, string begin, string end, string itemName, string fBill, string fDriver, string fSupercargo, string fSupplierName, string fName, string fVehicleNum)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var fBillParameter = fBill != null ?
                new ObjectParameter("FBill", fBill) :
                new ObjectParameter("FBill", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fSupplierNameParameter = fSupplierName != null ?
                new ObjectParameter("FSupplierName", fSupplierName) :
                new ObjectParameter("FSupplierName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LiquidPlanList_Result>("proc_LiquidPlanList", companyIdParameter, keyIdParameter, beginParameter, endParameter, itemNameParameter, fBillParameter, fDriverParameter, fSupercargoParameter, fSupplierNameParameter, fNameParameter, fVehicleNumParameter);
        }
    
        public virtual ObjectResult<proc_FMonthAP_Result> proc_FMonthAP(Nullable<int> companyId, string fMonth, string fCode, string fName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FMonthAP_Result>("proc_FMonthAP", companyIdParameter, fMonthParameter, fCodeParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_FMonthAR_Result> proc_FMonthAR(Nullable<int> companyId, string fMonth, string fCode, string fName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FMonthAR_Result>("proc_FMonthAR", companyIdParameter, fMonthParameter, fCodeParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_MonthEndBottle_Result> proc_MonthEndBottle(Nullable<System.DateTime> fDate, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_MonthEndBottle_Result>("proc_MonthEndBottle", fDateParameter, companyidParameter);
        }
    
        public virtual int proc_MonthGas(string fDate, string fMonthT, Nullable<int> companyid)
        {
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthGas", fDateParameter, fMonthTParameter, companyidParameter);
        }
    
        public virtual ObjectResult<proc_SupplierMonthProc_Result> proc_SupplierMonthProc(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fCCCode)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCCCodeParameter = fCCCode != null ?
                new ObjectParameter("FCCCode", fCCCode) :
                new ObjectParameter("FCCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SupplierMonthProc_Result>("proc_SupplierMonthProc", fDateParameter, companyidParameter, fCCCodeParameter);
        }
    
        public virtual ObjectResult<string> proc_GetCode(Nullable<int> companyId, string type)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GetCode", companyIdParameter, typeParameter);
        }
    
        public virtual int proc_MonthBottle_new(Nullable<System.DateTime> fDate, string fMonthT, Nullable<int> companyid)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthBottle_new", fDateParameter, fMonthTParameter, companyidParameter);
        }
    
        public virtual ObjectResult<rpt_DispathCenterList_Result> rpt_DispathCenterList(string keyid, Nullable<int> companyId)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DispathCenterList_Result>("rpt_DispathCenterList", keyidParameter, companyIdParameter);
        }
    
        public virtual int proc_LiquidTo(Nullable<int> companyId, string keyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidTo", companyIdParameter, keyIdParameter);
        }
    
        public virtual int proc_LiquidMargin(string keyid, Nullable<int> companyId)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidMargin", keyidParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<proc_AccountDetails_Result> proc_AccountDetails(Nullable<int> fCompanyId, string fCode, Nullable<System.DateTime> fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AccountDetails_Result>("proc_AccountDetails", fCompanyIdParameter, fCodeParameter, fDateParameter);
        }
    
        public virtual ObjectResult<proc_AuditDetails_Result> proc_AuditDetails(Nullable<int> fCompanyId, string fNum)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fNumParameter = fNum != null ?
                new ObjectParameter("FNum", fNum) :
                new ObjectParameter("FNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_AuditDetails_Result>("proc_AuditDetails", fCompanyIdParameter, fNumParameter);
        }
    
        public virtual ObjectResult<proc_BottleFlow1_Result> proc_BottleFlow1(Nullable<int> fCompanyId, Nullable<System.DateTime> fDate, string fCode, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BottleFlow1_Result>("proc_BottleFlow1", fCompanyIdParameter, fDateParameter, fCodeParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_BottleFlow1_bak_Result> proc_BottleFlow1_bak(Nullable<int> fCompanyId, Nullable<System.DateTime> fDate, string fCode, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BottleFlow1_bak_Result>("proc_BottleFlow1_bak", fCompanyIdParameter, fDateParameter, fCodeParameter, fNameParameter);
        }
    
        public virtual int proc_BottleQty2(Nullable<int> fCompanyId, Nullable<System.DateTime> fDate, string fCode, string fArea, string fSalesman, string fBottle)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fAreaParameter = fArea != null ?
                new ObjectParameter("FArea", fArea) :
                new ObjectParameter("FArea", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BottleQty2", fCompanyIdParameter, fDateParameter, fCodeParameter, fAreaParameter, fSalesmanParameter, fBottleParameter);
        }
    
        public virtual ObjectResult<proc_CustomerBottleFlowQty_Result> proc_CustomerBottleFlowQty(Nullable<int> fCompanyId, string fDate, string fCode, string fSalesman, string fArea, string fBottle)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            var fAreaParameter = fArea != null ?
                new ObjectParameter("FArea", fArea) :
                new ObjectParameter("FArea", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CustomerBottleFlowQty_Result>("proc_CustomerBottleFlowQty", fCompanyIdParameter, fDateParameter, fCodeParameter, fSalesmanParameter, fAreaParameter, fBottleParameter);
        }
    
        public virtual ObjectResult<proc_CustomerStatement_Result> proc_CustomerStatement(Nullable<System.DateTime> begin, Nullable<System.DateTime> end, string fCode, Nullable<int> fCompanyId, string fItemCode, string keyId)
        {
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CustomerStatement_Result>("proc_CustomerStatement", beginParameter, endParameter, fCodeParameter, fCompanyIdParameter, fItemCodeParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<proc_FPieceWork_Result> proc_FPieceWork(Nullable<int> fCompanyId, string fBegin, string fEnd, string fDriver, string fSupercargo, string fType, string fCode, string fName, string fitemName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fitemNameParameter = fitemName != null ?
                new ObjectParameter("FitemName", fitemName) :
                new ObjectParameter("FitemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FPieceWork_Result>("proc_FPieceWork", fCompanyIdParameter, fBeginParameter, fEndParameter, fDriverParameter, fSupercargoParameter, fTypeParameter, fCodeParameter, fNameParameter, fitemNameParameter);
        }
    
        public virtual ObjectResult<proc_FPieceWork1_Result> proc_FPieceWork1(Nullable<int> fCompanyId, string fBegin, string fEnd, string fDriver, string fSupercargo, string fType, string fCode, string fName, string fitemName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fitemNameParameter = fitemName != null ?
                new ObjectParameter("FitemName", fitemName) :
                new ObjectParameter("FitemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FPieceWork1_Result>("proc_FPieceWork1", fCompanyIdParameter, fBeginParameter, fEndParameter, fDriverParameter, fSupercargoParameter, fTypeParameter, fCodeParameter, fNameParameter, fitemNameParameter);
        }
    
        public virtual ObjectResult<proc_FPieceWork2_Result> proc_FPieceWork2(Nullable<int> fCompanyId, string fBegin, string fEnd, string fDriver, string fSupercargo, string fType, string fCode, string fName, string fitemName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fitemNameParameter = fitemName != null ?
                new ObjectParameter("FitemName", fitemName) :
                new ObjectParameter("FitemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FPieceWork2_Result>("proc_FPieceWork2", fCompanyIdParameter, fBeginParameter, fEndParameter, fDriverParameter, fSupercargoParameter, fTypeParameter, fCodeParameter, fNameParameter, fitemNameParameter);
        }
    
        public virtual int proc_GetCustomerBottle(string companyId, string month, string customer, string bottleCode)
        {
            var companyIdParameter = companyId != null ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var bottleCodeParameter = bottleCode != null ?
                new ObjectParameter("BottleCode", bottleCode) :
                new ObjectParameter("BottleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetCustomerBottle", companyIdParameter, monthParameter, customerParameter, bottleCodeParameter);
        }
    
        public virtual int proc_GetMonthAMont(string beginMonth, string endMonth, Nullable<int> company)
        {
            var beginMonthParameter = beginMonth != null ?
                new ObjectParameter("BeginMonth", beginMonth) :
                new ObjectParameter("BeginMonth", typeof(string));
    
            var endMonthParameter = endMonth != null ?
                new ObjectParameter("EndMonth", endMonth) :
                new ObjectParameter("EndMonth", typeof(string));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetMonthAMont", beginMonthParameter, endMonthParameter, companyParameter);
        }
    
        public virtual ObjectResult<proc_Inventory_Result> proc_Inventory(Nullable<int> fCompanyId, Nullable<System.DateTime> fDate, Nullable<int> fCateId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Inventory_Result>("proc_Inventory", fCompanyIdParameter, fDateParameter, fCateIdParameter);
        }
    
        public virtual ObjectResult<proc_LeaseBottleRec_Result> proc_LeaseBottleRec(Nullable<int> fCompanyId, string fCode, string fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseBottleRec_Result>("proc_LeaseBottleRec", fCompanyIdParameter, fCodeParameter, fDateParameter);
        }
    
        public virtual int proc_LeaseQty(Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, Nullable<int> fCompanyId, string fCode, string fName, string fBottle, string fBottleName, string keyId, string fAbstract)
        {
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            var fBottleNameParameter = fBottleName != null ?
                new ObjectParameter("FBottleName", fBottleName) :
                new ObjectParameter("FBottleName", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fAbstractParameter = fAbstract != null ?
                new ObjectParameter("FAbstract", fAbstract) :
                new ObjectParameter("FAbstract", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaseQty", fBeginParameter, fEndParameter, fCompanyIdParameter, fCodeParameter, fNameParameter, fBottleParameter, fBottleNameParameter, keyIdParameter, fAbstractParameter);
        }
    
        public virtual ObjectResult<proc_LeaseQtyDetails_Result> proc_LeaseQtyDetails(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LeaseQtyDetails_Result>("proc_LeaseQtyDetails", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual int proc_LHCustomerPriceLog(string fUpdateBy, Nullable<int> fId)
        {
            var fUpdateByParameter = fUpdateBy != null ?
                new ObjectParameter("FUpdateBy", fUpdateBy) :
                new ObjectParameter("FUpdateBy", typeof(string));
    
            var fIdParameter = fId.HasValue ?
                new ObjectParameter("FId", fId) :
                new ObjectParameter("FId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LHCustomerPriceLog", fUpdateByParameter, fIdParameter);
        }
    
        public virtual ObjectResult<proc_LiquidPlanMerge_Result> proc_LiquidPlanMerge(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LiquidPlanMerge_Result>("proc_LiquidPlanMerge", companyIdParameter);
        }
    
        public virtual int proc_LiquidPlanMergeProc(Nullable<int> companyId, string keyId, string keyId1, string keyId2, string keyId3, string keyId4)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("keyId", keyId) :
                new ObjectParameter("keyId", typeof(string));
    
            var keyId1Parameter = keyId1 != null ?
                new ObjectParameter("keyId1", keyId1) :
                new ObjectParameter("keyId1", typeof(string));
    
            var keyId2Parameter = keyId2 != null ?
                new ObjectParameter("keyId2", keyId2) :
                new ObjectParameter("keyId2", typeof(string));
    
            var keyId3Parameter = keyId3 != null ?
                new ObjectParameter("keyId3", keyId3) :
                new ObjectParameter("keyId3", typeof(string));
    
            var keyId4Parameter = keyId4 != null ?
                new ObjectParameter("keyId4", keyId4) :
                new ObjectParameter("keyId4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LiquidPlanMergeProc", companyIdParameter, keyIdParameter, keyId1Parameter, keyId2Parameter, keyId3Parameter, keyId4Parameter);
        }
    
        public virtual ObjectResult<proc_LoadingValuation_Result> proc_LoadingValuation(Nullable<int> fCompanyId, string fBegin, string fEnd)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_LoadingValuation_Result>("proc_LoadingValuation", fCompanyIdParameter, fBeginParameter, fEndParameter);
        }
    
        public virtual ObjectResult<proc_MonthAccount_Result> proc_MonthAccount(Nullable<int> fCompanyId, string fMonth, string fMonthT, string createBy, string begin, string end)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_MonthAccount_Result>("proc_MonthAccount", fCompanyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_MonthBottleFlow_Result> proc_MonthBottleFlow(Nullable<int> companyId, Nullable<System.DateTime> fDate, string fCode, string fName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_MonthBottleFlow_Result>("proc_MonthBottleFlow", companyIdParameter, fDateParameter, fCodeParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_MonthBottleFlow2_Result> proc_MonthBottleFlow2(Nullable<int> companyId, Nullable<System.DateTime> fDate, string fCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_MonthBottleFlow2_Result>("proc_MonthBottleFlow2", companyIdParameter, fDateParameter, fCodeParameter);
        }
    
        public virtual int proc_MonthStockBottle(Nullable<int> companyId, string fMonth, string fMonthT, string alterBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var alterByParameter = alterBy != null ?
                new ObjectParameter("alterBy", alterBy) :
                new ObjectParameter("alterBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthStockBottle", companyIdParameter, fMonthParameter, fMonthTParameter, alterByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthStockGas(Nullable<int> companyId, string fMonth, string fMonthT, string alterBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var alterByParameter = alterBy != null ?
                new ObjectParameter("alterBy", alterBy) :
                new ObjectParameter("alterBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthStockGas", companyIdParameter, fMonthParameter, fMonthTParameter, alterByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthStockGasBottle(Nullable<int> companyId, string month, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthStockGasBottle", companyIdParameter, monthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthStockParts(Nullable<int> companyId, string fMonth, string fMonthT, string alterBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var alterByParameter = alterBy != null ?
                new ObjectParameter("alterBy", alterBy) :
                new ObjectParameter("alterBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthStockParts", companyIdParameter, fMonthParameter, fMonthTParameter, alterByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthSubject(Nullable<int> fCompanyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthSubject", fCompanyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_PassCardToPurchase(string keyId, Nullable<int> fCompanyId, string fCode, string salesKeyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var salesKeyIdParameter = salesKeyId != null ?
                new ObjectParameter("SalesKeyId", salesKeyId) :
                new ObjectParameter("SalesKeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_PassCardToPurchase", keyIdParameter, fCompanyIdParameter, fCodeParameter, salesKeyIdParameter);
        }
    
        public virtual int proc_PassCardToSales(string keyId, Nullable<int> fCompanyId, string fCode, string salesKeyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var salesKeyIdParameter = salesKeyId != null ?
                new ObjectParameter("SalesKeyId", salesKeyId) :
                new ObjectParameter("SalesKeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_PassCardToSales", keyIdParameter, fCompanyIdParameter, fCodeParameter, salesKeyIdParameter);
        }
    
        public virtual ObjectResult<proc_PrintPassCard_Result> proc_PrintPassCard(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintPassCard_Result>("proc_PrintPassCard", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_ProductionCost_Result> proc_ProductionCost(Nullable<int> fCompanyId, string fBegin, string fEnd, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ProductionCost_Result>("proc_ProductionCost", fCompanyIdParameter, fBeginParameter, fEndParameter, fNameParameter);
        }
    
        public virtual ObjectResult<proc_ReconciliationAR_Result> proc_ReconciliationAR(Nullable<int> companyid, string fCode, string firstDay, string end, string fDate)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var firstDayParameter = firstDay != null ?
                new ObjectParameter("FirstDay", firstDay) :
                new ObjectParameter("FirstDay", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ReconciliationAR_Result>("proc_ReconciliationAR", companyidParameter, fCodeParameter, firstDayParameter, endParameter, fDateParameter);
        }
    
        public virtual ObjectResult<proc_Statement1_Result> proc_Statement1(string fBegin, string fEnd, Nullable<int> fCompanyId, string fName, string fCode)
        {
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Statement1_Result>("proc_Statement1", fBeginParameter, fEndParameter, fCompanyIdParameter, fNameParameter, fCodeParameter);
        }
    
        public virtual int proc_StockIn(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId, Nullable<int> bill, string fCode, string fName, string fItemCode, string fItemName, string createBy, string keyId)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billParameter = bill.HasValue ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("createBy", createBy) :
                new ObjectParameter("createBy", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_StockIn", beginDateParameter, endDateParameter, companyIdParameter, billParameter, fCodeParameter, fNameParameter, fItemCodeParameter, fItemNameParameter, createByParameter, keyIdParameter);
        }
    
        public virtual int proc_StockOut(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> companyId, Nullable<int> bill, string fCode, string fName, string fItemCode, string fItemName, string createBy, string keyId)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var billParameter = bill.HasValue ?
                new ObjectParameter("Bill", bill) :
                new ObjectParameter("Bill", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("createBy", createBy) :
                new ObjectParameter("createBy", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_StockOut", beginDateParameter, endDateParameter, companyIdParameter, billParameter, fCodeParameter, fNameParameter, fItemCodeParameter, fItemNameParameter, createByParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<proc_SupplierMonthProc1_Result> proc_SupplierMonthProc1(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fCode)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SupplierMonthProc1_Result>("proc_SupplierMonthProc1", fDateParameter, companyidParameter, fCodeParameter);
        }
    
        public virtual int proc_Task()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Task");
        }
    
        public virtual ObjectResult<Nullable<int>> proc_ValidateSalary(string keyId, Nullable<int> fCompanyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("proc_ValidateSalary", keyIdParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_Account_Result> rpt_Account(Nullable<int> fCompanyId, Nullable<System.DateTime> fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Account_Result>("rpt_Account", fCompanyIdParameter, fDateParameter);
        }
    
        public virtual ObjectResult<rpt_AccountDetails_Result> rpt_AccountDetails(Nullable<int> fCompanyId, string fCode, Nullable<System.DateTime> fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_AccountDetails_Result>("rpt_AccountDetails", fCompanyIdParameter, fCodeParameter, fDateParameter);
        }
    
        public virtual ObjectResult<rpt_Bottle_Result> rpt_Bottle(Nullable<int> fCompanyId, string fDate, string bottleFName, string bottleFCode, string fCateId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var bottleFNameParameter = bottleFName != null ?
                new ObjectParameter("BottleFName", bottleFName) :
                new ObjectParameter("BottleFName", typeof(string));
    
            var bottleFCodeParameter = bottleFCode != null ?
                new ObjectParameter("BottleFCode", bottleFCode) :
                new ObjectParameter("BottleFCode", typeof(string));
    
            var fCateIdParameter = fCateId != null ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Bottle_Result>("rpt_Bottle", fCompanyIdParameter, fDateParameter, bottleFNameParameter, bottleFCodeParameter, fCateIdParameter);
        }
    
        public virtual int rpt_CustomerItem(string begindate, string enddate, string seller, string fCode, string companyid)
        {
            var begindateParameter = begindate != null ?
                new ObjectParameter("begindate", begindate) :
                new ObjectParameter("begindate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rpt_CustomerItem", begindateParameter, enddateParameter, sellerParameter, fCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<rpt_DailyCash_Result> rpt_DailyCash(Nullable<int> companyId, string begin, string end, string subjectcode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            var subjectcodeParameter = subjectcode != null ?
                new ObjectParameter("subjectcode", subjectcode) :
                new ObjectParameter("subjectcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DailyCash_Result>("rpt_DailyCash", companyIdParameter, beginParameter, endParameter, subjectcodeParameter);
        }
    
        public virtual ObjectResult<rpt_dayInventory2_Result> rpt_dayInventory2(Nullable<System.DateTime> fDate, Nullable<int> companyid, string fName)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_dayInventory2_Result>("rpt_dayInventory2", fDateParameter, companyidParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_dayInventoryDetails_Result> rpt_dayInventoryDetails(Nullable<int> fCompanyId, string fType, string fDate, string fCode)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fTypeParameter = fType != null ?
                new ObjectParameter("FType", fType) :
                new ObjectParameter("FType", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_dayInventoryDetails_Result>("rpt_dayInventoryDetails", fCompanyIdParameter, fTypeParameter, fDateParameter, fCodeParameter);
        }
    
        public virtual ObjectResult<rpt_ElectronGas_Result> rpt_ElectronGas(string fDate, Nullable<int> fCompanyId, string unitType, string fName, string fSalesman, string bottleFName)
        {
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            var bottleFNameParameter = bottleFName != null ?
                new ObjectParameter("BottleFName", bottleFName) :
                new ObjectParameter("BottleFName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_ElectronGas_Result>("rpt_ElectronGas", fDateParameter, fCompanyIdParameter, unitTypeParameter, fNameParameter, fSalesmanParameter, bottleFNameParameter);
        }
    
        public virtual ObjectResult<rpt_FMonthLeaseDetails_Result> rpt_FMonthLeaseDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fName, string fItemCode, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FMonthLeaseDetails_Result>("rpt_FMonthLeaseDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fNameParameter, fItemCodeParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<rpt_FMonthPurchaseDetails_Result> rpt_FMonthPurchaseDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fItemCode, string fItemName, string keyId, string fClass, string fVehicleNum)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fClassParameter = fClass != null ?
                new ObjectParameter("FClass", fClass) :
                new ObjectParameter("FClass", typeof(string));
    
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FMonthPurchaseDetails_Result>("rpt_FMonthPurchaseDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fItemCodeParameter, fItemNameParameter, keyIdParameter, fClassParameter, fVehicleNumParameter);
        }
    
        public virtual ObjectResult<rpt_FMonthSalary_Result> rpt_FMonthSalary(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fName, string fItemCode, string fItemName, string fSalesman)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FMonthSalary_Result>("rpt_FMonthSalary", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fNameParameter, fItemCodeParameter, fItemNameParameter, fSalesmanParameter);
        }
    
        public virtual ObjectResult<rpt_FMonthSalaryDetails_Result> rpt_FMonthSalaryDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fName, string fItemCode, string fItemName, string keyId, string fDistributionPoint)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fDistributionPointParameter = fDistributionPoint != null ?
                new ObjectParameter("FDistributionPoint", fDistributionPoint) :
                new ObjectParameter("FDistributionPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FMonthSalaryDetails_Result>("rpt_FMonthSalaryDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fNameParameter, fItemCodeParameter, fItemNameParameter, keyIdParameter, fDistributionPointParameter);
        }
    
        public virtual int rpt_GetBank(Nullable<int> company, string month)
        {
            var companyParameter = company.HasValue ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rpt_GetBank", companyParameter, monthParameter);
        }
    
        public virtual ObjectResult<rpt_Inventory_Result> rpt_Inventory(Nullable<int> fCompanyId, string fDate, Nullable<int> fCateId, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Inventory_Result>("rpt_Inventory", fCompanyIdParameter, fDateParameter, fCateIdParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_InventoryBottle_Result> rpt_InventoryBottle(Nullable<int> fCompanyId, string fDate, Nullable<int> fCateId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_InventoryBottle_Result>("rpt_InventoryBottle", fCompanyIdParameter, fDateParameter, fCateIdParameter);
        }
    
        public virtual ObjectResult<rpt_InventoryGas_Result> rpt_InventoryGas(Nullable<int> fCompanyId, string fDate, Nullable<int> fCateId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_InventoryGas_Result>("rpt_InventoryGas", fCompanyIdParameter, fDateParameter, fCateIdParameter);
        }
    
        public virtual ObjectResult<rpt_InventoryParts_Result> rpt_InventoryParts(Nullable<int> fCompanyId, string fDate, Nullable<int> fCateId, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCateIdParameter = fCateId.HasValue ?
                new ObjectParameter("FCateId", fCateId) :
                new ObjectParameter("FCateId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_InventoryParts_Result>("rpt_InventoryParts", fCompanyIdParameter, fDateParameter, fCateIdParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_LiquidMargin_Result> rpt_LiquidMargin(Nullable<int> fCompanyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_LiquidMargin_Result>("rpt_LiquidMargin", fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_LiquidPurchase_Result> rpt_LiquidPurchase(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fItemCode, string fItemName, string keyId, string fClass, string fVehicleNum)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fClassParameter = fClass != null ?
                new ObjectParameter("FClass", fClass) :
                new ObjectParameter("FClass", typeof(string));
    
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_LiquidPurchase_Result>("rpt_LiquidPurchase", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fItemCodeParameter, fItemNameParameter, keyIdParameter, fClassParameter, fVehicleNumParameter);
        }
    
        public virtual ObjectResult<rpt_LiquidSales_Result> rpt_LiquidSales(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fName, string fItemCode, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_LiquidSales_Result>("rpt_LiquidSales", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fNameParameter, fItemCodeParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<rpt_PassCardDetails_Result> rpt_PassCardDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fItemCode, string keyId, string createBy, string fItemName, string fName)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_PassCardDetails_Result>("rpt_PassCardDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fItemCodeParameter, keyIdParameter, createByParameter, fItemNameParameter, fNameParameter);
        }
    
        public virtual ObjectResult<rpt_SalaryMonthDetail_Result> rpt_SalaryMonthDetail(Nullable<System.DateTime> fDate, string firstDay, string endDay, Nullable<int> companyid, string fCustomerCode)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(System.DateTime));
    
            var firstDayParameter = firstDay != null ?
                new ObjectParameter("FirstDay", firstDay) :
                new ObjectParameter("FirstDay", typeof(string));
    
            var endDayParameter = endDay != null ?
                new ObjectParameter("EndDay", endDay) :
                new ObjectParameter("EndDay", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fCustomerCodeParameter = fCustomerCode != null ?
                new ObjectParameter("FCustomerCode", fCustomerCode) :
                new ObjectParameter("FCustomerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalaryMonthDetail_Result>("rpt_SalaryMonthDetail", fDateParameter, firstDayParameter, endDayParameter, companyidParameter, fCustomerCodeParameter);
        }
    
        public virtual int rpt_SaleItem(string begindate, string enddate, string seller, string itemCode, string companyid)
        {
            var begindateParameter = begindate != null ?
                new ObjectParameter("begindate", begindate) :
                new ObjectParameter("begindate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rpt_SaleItem", begindateParameter, enddateParameter, sellerParameter, itemCodeParameter, companyidParameter);
        }
    
        public virtual int rpt_SaleItemDetail(string begindate, string enddate, string seller, string itemCode, string companyid, string fCode)
        {
            var begindateParameter = begindate != null ?
                new ObjectParameter("begindate", begindate) :
                new ObjectParameter("begindate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var companyidParameter = companyid != null ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rpt_SaleItemDetail", begindateParameter, enddateParameter, sellerParameter, itemCodeParameter, companyidParameter, fCodeParameter);
        }
    
        public virtual ObjectResult<FSalary_Driver_Result> FSalary_Driver(Nullable<int> fCompanyId, string beginDate, string endDate, string fPoint, string fDriver, string fSupercargo, string fVehicleType)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fVehicleTypeParameter = fVehicleType != null ?
                new ObjectParameter("FVehicleType", fVehicleType) :
                new ObjectParameter("FVehicleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FSalary_Driver_Result>("FSalary_Driver", fCompanyIdParameter, beginDateParameter, endDateParameter, fPointParameter, fDriverParameter, fSupercargoParameter, fVehicleTypeParameter);
        }
    
        public virtual ObjectResult<FSalary_DriverExt_Result> FSalary_DriverExt(Nullable<int> fCompanyId, string beginDate, string endDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FSalary_DriverExt_Result>("FSalary_DriverExt", fCompanyIdParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<FSalary_Shipper_Result> FSalary_Shipper(string beginDate, string endDate, string person)
        {
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            var personParameter = person != null ?
                new ObjectParameter("Person", person) :
                new ObjectParameter("Person", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FSalary_Shipper_Result>("FSalary_Shipper", beginDateParameter, endDateParameter, personParameter);
        }
    
        public virtual ObjectResult<proc_Analyse_Result> proc_Analyse(Nullable<int> companyId, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string group)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Analyse_Result>("proc_Analyse", companyIdParameter, beginDateParameter, endDateParameter, groupParameter);
        }
    
        public virtual ObjectResult<proc_DispachDetails_Result> proc_DispachDetails(string fVehicleNum, string fBegin, string fEnd)
        {
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            var fBeginParameter = fBegin != null ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(string));
    
            var fEndParameter = fEnd != null ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispachDetails_Result>("proc_DispachDetails", fVehicleNumParameter, fBeginParameter, fEndParameter);
        }
    
        public virtual ObjectResult<proc_DispachXml_Result> proc_DispachXml(string keyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispachXml_Result>("proc_DispachXml", keyIdParameter);
        }
    
        public virtual int proc_DispatchAddTask(string disKey, string keyid, Nullable<int> companyId)
        {
            var disKeyParameter = disKey != null ?
                new ObjectParameter("disKey", disKey) :
                new ObjectParameter("disKey", typeof(string));
    
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DispatchAddTask", disKeyParameter, keyidParameter, companyIdParameter);
        }
    
        public virtual int proc_DispatchAuto(Nullable<int> fCompanyId, string fLogisticsCode, string fDate, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fLogisticsCodeParameter = fLogisticsCode != null ?
                new ObjectParameter("FLogisticsCode", fLogisticsCode) :
                new ObjectParameter("FLogisticsCode", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DispatchAuto", fCompanyIdParameter, fLogisticsCodeParameter, fDateParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<proc_DispatchDetails_Result> proc_DispatchDetails(string keyId, Nullable<int> fCompanyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispatchDetails_Result>("proc_DispatchDetails", keyIdParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<proc_DispatchDoc_Result> proc_DispatchDoc(string keyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispatchDoc_Result>("proc_DispatchDoc", keyIdParameter);
        }
    
        public virtual int proc_DispatchResase(string keyid, Nullable<int> companyId)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DispatchResase", keyidParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<proc_DispatchTaskDetails_Result> proc_DispatchTaskDetails(string keyid, Nullable<int> companyId)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DispatchTaskDetails_Result>("proc_DispatchTaskDetails", keyidParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<string> proc_GetWarehouseByName(Nullable<int> companyId, string fName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("proc_GetWarehouseByName", companyIdParameter, fNameParameter);
        }
    
        public virtual int proc_MonthRealtimeInventoryBottle(string fPoint, Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthRealtimeInventoryBottle", fPointParameter, companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthRealtimeInventoryBottle2(string fPoint, Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthRealtimeInventoryBottle2", fPointParameter, companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthRealtimeInventoryGas(string fPoint, Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthRealtimeInventoryGas", fPointParameter, companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual int proc_MonthRealtimeInventoryGas2(string fPoint, Nullable<int> companyId, string fMonth, string fMonthT, string createBy, Nullable<System.DateTime> begin, Nullable<System.DateTime> end)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fMonthParameter = fMonth != null ?
                new ObjectParameter("FMonth", fMonth) :
                new ObjectParameter("FMonth", typeof(string));
    
            var fMonthTParameter = fMonthT != null ?
                new ObjectParameter("FMonthT", fMonthT) :
                new ObjectParameter("FMonthT", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var beginParameter = begin.HasValue ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_MonthRealtimeInventoryGas2", fPointParameter, companyIdParameter, fMonthParameter, fMonthTParameter, createByParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_OnBootleFlowQty_Result> proc_OnBootleFlowQty(Nullable<int> fCompanyId, string fDate, string fCode, string fSalesman, string fArea, string fBottle)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fSalesmanParameter = fSalesman != null ?
                new ObjectParameter("FSalesman", fSalesman) :
                new ObjectParameter("FSalesman", typeof(string));
    
            var fAreaParameter = fArea != null ?
                new ObjectParameter("FArea", fArea) :
                new ObjectParameter("FArea", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_OnBootleFlowQty_Result>("proc_OnBootleFlowQty", fCompanyIdParameter, fDateParameter, fCodeParameter, fSalesmanParameter, fAreaParameter, fBottleParameter);
        }
    
        public virtual ObjectResult<proc_PrintAllotPlan_Result> proc_PrintAllotPlan(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintAllotPlan_Result>("proc_PrintAllotPlan", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintAllotTrans_Result> proc_PrintAllotTrans(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintAllotTrans_Result>("proc_PrintAllotTrans", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_PrintTubeSales_Result> proc_PrintTubeSales(Nullable<int> companyId, string keyId, string begin, string end)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_PrintTubeSales_Result>("proc_PrintTubeSales", companyIdParameter, keyIdParameter, beginParameter, endParameter);
        }
    
        public virtual ObjectResult<proc_RealtimeInventoryBottle_Result> proc_RealtimeInventoryBottle(Nullable<int> fCompanyId, string fDate, string fPoint)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RealtimeInventoryBottle_Result>("proc_RealtimeInventoryBottle", fCompanyIdParameter, fDateParameter, fPointParameter);
        }
    
        public virtual ObjectResult<proc_RealtimeInventoryBottle_details_Result> proc_RealtimeInventoryBottle_details(Nullable<int> fCompanyId, string fDate, string fPoint, string fCode)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RealtimeInventoryBottle_details_Result>("proc_RealtimeInventoryBottle_details", fCompanyIdParameter, fDateParameter, fPointParameter, fCodeParameter);
        }
    
        public virtual ObjectResult<proc_RealtimeInventoryGas_Result> proc_RealtimeInventoryGas(Nullable<int> fCompanyId, string fDate, string fPoint)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RealtimeInventoryGas_Result>("proc_RealtimeInventoryGas", fCompanyIdParameter, fDateParameter, fPointParameter);
        }
    
        public virtual ObjectResult<proc_RealtimeInventoryGas_details_Result> proc_RealtimeInventoryGas_details(Nullable<int> fCompanyId, string fPoint, string fDate, string fCode)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RealtimeInventoryGas_details_Result>("proc_RealtimeInventoryGas_details", fCompanyIdParameter, fPointParameter, fDateParameter, fCodeParameter);
        }
    
        public virtual ObjectResult<proc_SalesAudit_Result> proc_SalesAudit(Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, Nullable<int> fCompanyId, string fCode, string fName, string fItemCode, string fItemName, string keyId, string fShipper, string fDriver, string fQty, string fAuditFlag)
        {
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var fItemNameParameter = fItemName != null ?
                new ObjectParameter("FItemName", fItemName) :
                new ObjectParameter("FItemName", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fShipperParameter = fShipper != null ?
                new ObjectParameter("FShipper", fShipper) :
                new ObjectParameter("FShipper", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fQtyParameter = fQty != null ?
                new ObjectParameter("FQty", fQty) :
                new ObjectParameter("FQty", typeof(string));
    
            var fAuditFlagParameter = fAuditFlag != null ?
                new ObjectParameter("FAuditFlag", fAuditFlag) :
                new ObjectParameter("FAuditFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SalesAudit_Result>("proc_SalesAudit", fBeginParameter, fEndParameter, fCompanyIdParameter, fCodeParameter, fNameParameter, fItemCodeParameter, fItemNameParameter, keyIdParameter, fShipperParameter, fDriverParameter, fQtyParameter, fAuditFlagParameter);
        }
    
        public virtual ObjectResult<proc_SalesAuditDetails_Result> proc_SalesAuditDetails(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_SalesAuditDetails_Result>("proc_SalesAuditDetails", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_SalesOrder(string keyid, Nullable<int> companyid)
        {
            var keyidParameter = keyid != null ?
                new ObjectParameter("keyid", keyid) :
                new ObjectParameter("keyid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_SalesOrder", keyidParameter, companyidParameter);
        }
    
        public virtual int proc_SalesPlanToSales(string oCKeyId, string fData, Nullable<int> fCompanyId, string createBy)
        {
            var oCKeyIdParameter = oCKeyId != null ?
                new ObjectParameter("OCKeyId", oCKeyId) :
                new ObjectParameter("OCKeyId", typeof(string));
    
            var fDataParameter = fData != null ?
                new ObjectParameter("FData", fData) :
                new ObjectParameter("FData", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_SalesPlanToSales", oCKeyIdParameter, fDataParameter, fCompanyIdParameter, createByParameter);
        }
    
        public virtual int proc_Stock(Nullable<int> fCompanyId, string fDistributionPoint, string fCode, string fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDistributionPointParameter = fDistributionPoint != null ?
                new ObjectParameter("FDistributionPoint", fDistributionPoint) :
                new ObjectParameter("FDistributionPoint", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Stock", fCompanyIdParameter, fDistributionPointParameter, fCodeParameter, fDateParameter);
        }
    
        public virtual ObjectResult<proc_StockGas_Result> proc_StockGas(Nullable<int> fCompanyId, string fDistributionPoint, string fCode, string fDate)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fDistributionPointParameter = fDistributionPoint != null ?
                new ObjectParameter("FDistributionPoint", fDistributionPoint) :
                new ObjectParameter("FDistributionPoint", typeof(string));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_StockGas_Result>("proc_StockGas", fCompanyIdParameter, fDistributionPointParameter, fCodeParameter, fDateParameter);
        }
    
        public virtual int proc_TubePlan(Nullable<int> companyId, string keyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_TubePlan", companyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<proc_TubePlanList_Result> proc_TubePlanList(Nullable<int> companyId, string keyId, string begin, string end, string itemName, string fBill, string fDriver, string fSupercargo, string fSupplierName, string fName, string fVehicleNum)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var beginParameter = begin != null ?
                new ObjectParameter("begin", begin) :
                new ObjectParameter("begin", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var fBillParameter = fBill != null ?
                new ObjectParameter("FBill", fBill) :
                new ObjectParameter("FBill", typeof(string));
    
            var fDriverParameter = fDriver != null ?
                new ObjectParameter("FDriver", fDriver) :
                new ObjectParameter("FDriver", typeof(string));
    
            var fSupercargoParameter = fSupercargo != null ?
                new ObjectParameter("FSupercargo", fSupercargo) :
                new ObjectParameter("FSupercargo", typeof(string));
    
            var fSupplierNameParameter = fSupplierName != null ?
                new ObjectParameter("FSupplierName", fSupplierName) :
                new ObjectParameter("FSupplierName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fVehicleNumParameter = fVehicleNum != null ?
                new ObjectParameter("FVehicleNum", fVehicleNum) :
                new ObjectParameter("FVehicleNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_TubePlanList_Result>("proc_TubePlanList", companyIdParameter, keyIdParameter, beginParameter, endParameter, itemNameParameter, fBillParameter, fDriverParameter, fSupercargoParameter, fSupplierNameParameter, fNameParameter, fVehicleNumParameter);
        }
    
        public virtual int proc_TubePlanPurchase(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_TubePlanPurchase", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual int proc_TubePlanSales1(string keyId, Nullable<int> companyId, string date)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_TubePlanSales1", keyIdParameter, companyIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<rpt_DispathList_Result> rpt_DispathList(string keyId, Nullable<int> fCompanyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DispathList_Result>("rpt_DispathList", keyIdParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_DispathList2_Result> rpt_DispathList2(string keyId, Nullable<int> fCompanyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DispathList2_Result>("rpt_DispathList2", keyIdParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_DispathLog_Result> rpt_DispathLog(string keyId, Nullable<int> fCompanyId)
        {
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DispathLog_Result>("rpt_DispathLog", keyIdParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_DynamicBottle_Result> rpt_DynamicBottle(string fPoint, string fBottle, string fDate, Nullable<int> fCompanyId)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DynamicBottle_Result>("rpt_DynamicBottle", fPointParameter, fBottleParameter, fDateParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_DynamicGas_Result> rpt_DynamicGas(string fPoint, string fBottle, string fDate, Nullable<int> fCompanyId)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_DynamicGas_Result>("rpt_DynamicGas", fPointParameter, fBottleParameter, fDateParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_FMonthAllotDetails_Result> rpt_FMonthAllotDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fName, string fItemCode, string keyId, string fDistributionPoint)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var fDistributionPointParameter = fDistributionPoint != null ?
                new ObjectParameter("FDistributionPoint", fDistributionPoint) :
                new ObjectParameter("FDistributionPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FMonthAllotDetails_Result>("rpt_FMonthAllotDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fNameParameter, fItemCodeParameter, keyIdParameter, fDistributionPointParameter);
        }
    
        public virtual ObjectResult<rpt_FSalesPlanCompare_Result> rpt_FSalesPlanCompare(Nullable<int> fCompanyId, string fCode, string fName, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FSalesPlanCompare_Result>("rpt_FSalesPlanCompare", fCompanyIdParameter, fCodeParameter, fNameParameter, fBeginParameter, fEndParameter);
        }
    
        public virtual int rpt_Invent(string fPoint, string fBottle, string fDate, Nullable<int> fCompanyId)
        {
            var fPointParameter = fPoint != null ?
                new ObjectParameter("FPoint", fPoint) :
                new ObjectParameter("FPoint", typeof(string));
    
            var fBottleParameter = fBottle != null ?
                new ObjectParameter("FBottle", fBottle) :
                new ObjectParameter("FBottle", typeof(string));
    
            var fDateParameter = fDate != null ?
                new ObjectParameter("FDate", fDate) :
                new ObjectParameter("FDate", typeof(string));
    
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rpt_Invent", fPointParameter, fBottleParameter, fDateParameter, fCompanyIdParameter);
        }
    
        public virtual ObjectResult<rpt_SalesPlanDetails_Result> rpt_SalesPlanDetails(Nullable<int> fCompanyId, Nullable<System.DateTime> fBegin, Nullable<System.DateTime> fEnd, string fCode, string fItemCode, string keyId, string createBy, string fDistributionPoint)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var fBeginParameter = fBegin.HasValue ?
                new ObjectParameter("FBegin", fBegin) :
                new ObjectParameter("FBegin", typeof(System.DateTime));
    
            var fEndParameter = fEnd.HasValue ?
                new ObjectParameter("FEnd", fEnd) :
                new ObjectParameter("FEnd", typeof(System.DateTime));
    
            var fCodeParameter = fCode != null ?
                new ObjectParameter("FCode", fCode) :
                new ObjectParameter("FCode", typeof(string));
    
            var fItemCodeParameter = fItemCode != null ?
                new ObjectParameter("FItemCode", fItemCode) :
                new ObjectParameter("FItemCode", typeof(string));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var fDistributionPointParameter = fDistributionPoint != null ?
                new ObjectParameter("FDistributionPoint", fDistributionPoint) :
                new ObjectParameter("FDistributionPoint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_SalesPlanDetails_Result>("rpt_SalesPlanDetails", fCompanyIdParameter, fBeginParameter, fEndParameter, fCodeParameter, fItemCodeParameter, keyIdParameter, createByParameter, fDistributionPointParameter);
        }
    
        public virtual ObjectResult<u8_Allot_Result> u8_Allot(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_Allot_Result>("u8_Allot", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_AllotList_Result> u8_AllotList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_AllotList_Result>("u8_AllotList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_Lossess_Result> u8_Lossess(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_Lossess_Result>("u8_Lossess", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_LossessList_Result> u8_LossessList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_LossessList_Result>("u8_LossessList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_MaterialStockOut_Result> u8_MaterialStockOut(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_MaterialStockOut_Result>("u8_MaterialStockOut", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_MaterialStockOutList_Result> u8_MaterialStockOutList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_MaterialStockOutList_Result>("u8_MaterialStockOutList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_ProductStockIn_Result> u8_ProductStockIn(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_ProductStockIn_Result>("u8_ProductStockIn", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_ProductStockInList_Result> u8_ProductStockInList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_ProductStockInList_Result>("u8_ProductStockInList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_Profit_Result> u8_Profit(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_Profit_Result>("u8_Profit", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_ProfitList_Result> u8_ProfitList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_ProfitList_Result>("u8_ProfitList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_Purchase_Result> u8_Purchase(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_Purchase_Result>("u8_Purchase", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_PurchaseList_Result> u8_PurchaseList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_PurchaseList_Result>("u8_PurchaseList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_PurchaseReturn_Result> u8_PurchaseReturn(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_PurchaseReturn_Result>("u8_PurchaseReturn", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_PurchaseReturnList_Result> u8_PurchaseReturnList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_PurchaseReturnList_Result>("u8_PurchaseReturnList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_Sales_Result> u8_Sales(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_Sales_Result>("u8_Sales", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_SalesList_Result> u8_SalesList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_SalesList_Result>("u8_SalesList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_SalesReturn_Result> u8_SalesReturn(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_SalesReturn_Result>("u8_SalesReturn", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_SalesReturnList_Result> u8_SalesReturnList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_SalesReturnList_Result>("u8_SalesReturnList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_StockIn_Result> u8_StockIn(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_StockIn_Result>("u8_StockIn", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_StockInList_Result> u8_StockInList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_StockInList_Result>("u8_StockInList", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_StockOut_Result> u8_StockOut(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_StockOut_Result>("u8_StockOut", fCompanyIdParameter, keyIdParameter);
        }
    
        public virtual ObjectResult<u8_StockOutList_Result> u8_StockOutList(Nullable<int> fCompanyId, string keyId)
        {
            var fCompanyIdParameter = fCompanyId.HasValue ?
                new ObjectParameter("FCompanyId", fCompanyId) :
                new ObjectParameter("FCompanyId", typeof(int));
    
            var keyIdParameter = keyId != null ?
                new ObjectParameter("KeyId", keyId) :
                new ObjectParameter("KeyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<u8_StockOutList_Result>("u8_StockOutList", fCompanyIdParameter, keyIdParameter);
        }
    }
}
