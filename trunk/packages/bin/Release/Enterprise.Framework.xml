<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enterprise.Framework</name>
    </assembly>
    <members>
        <member name="T:Enterprise.Framework.ComLib.Guard">
            <summary>
            Used for simple validations.
            </summary>      
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsTrue(System.Boolean)">
            <summary>
            Check that the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Check that the condition is true and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsFalse(System.Boolean)">
            <summary>
            Check that the condition is false.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Check that the condition is false and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is not null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsNotNull(System.Object)">
            <summary>
            Check that the object provided is not null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsNull(System.Object)">
            <summary>
            Check that the object provided is null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="M:Enterprise.Framework.ComLib.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <param name="message">Message of exception to throw.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="T:Enterprise.Framework.DataTimeLib.DateConverter">
            <summary>
            把"2007-11-4"转换为"二〇〇七年十一月四号" 
            示例：DateConvert.Instance.DateToChinese("2007-11-4")
            示例：DateConvert.Instance.DateToChinese("07-11-4")
            示例：DateConvert.Instance.DateToChinese("2007/11/4")
            示例：DateConvert.Instance.DateToChinese("07/11/4")
            </summary>
        </member>
        <member name="M:Enterprise.Framework.DataTimeLib.DateConverter.DateToChinese(System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.DataTimeLib.DateConverter.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Enum.YesNo">
            <summary>
                
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Enum.YesNo.Yes">
            <summary>
                Yes:1
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Enum.YesNo.No">
            <summary>
                No:2
            </summary>
        </member>
        <member name="T:Enterprise.Framework.File.FileDown">
            <summary>
            文件下载类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.FileNameExtension(System.String)">
            <summary>
            参数为虚拟路径
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.MapPathFile(System.String)">
            <summary>
            获取物理地址
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.NormalDownLoad(System.String,System.String)">
            <summary>
            WriteFile普通下载
            </summary>
            <param name="fileName">文件名</param>
            <param name="filePath">文件虚拟路径</param>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.DevideDownLoad(System.String,System.String)">
            <summary>
            WriteFile分块下载
            </summary>
            <param name="fileName">文件名</param>
            <param name="virtualDirectory">文件虚拟路径</param>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.StreamDownLoad(System.String,System.String)">
            <summary>
            流方式下载
            </summary>
            <param name="fileName">文件名</param>
            <param name="virtualDirectory">文件虚拟路径</param>
        </member>
        <member name="M:Enterprise.Framework.File.FileDown.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="request">Page.Request对象</param>
            <param name="response">Page.Response对象</param>
            <param name="fileName">下载文件名</param>
            <param name="fullPath">带文件名下载路径</param>
            <param name="speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:Enterprise.Framework.File.RdlcHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.RdlcHelper.ToExcl(System.String,System.Collections.Generic.IList{Microsoft.Reporting.WebForms.ReportDataSource},System.String)">
            <summary>
            
            </summary>
            <param name="rdlcPath"></param>
            <param name="dataSources"></param>
            <param name="excelPath"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.ReportExport">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.ReportExportExcel(System.Web.UI.Page,System.String,System.Web.UI.HtmlControls.HtmlTable,System.Web.UI.HtmlControls.HtmlTable)">
            <summary>
            将htmlTable中的数据导出到指定的Excel文件中
            </summary>
            <param name="page">web页面</param>
            <param name="fileName">Excel文件的名称</param>
            <param name="htmlTableTitle">标题</param>
            <param name="htmlTable">表格</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.ReportExportExcel(System.Web.UI.Page,System.String,System.String,System.Web.UI.WebControls.DataGrid)">
            <summary>
            将htmlTable中的数据导出到指定的Excel文件中
            </summary>
            <param name="page">web页面</param>
            <param name="fileName">Excel文件的名称</param>
            <param name="dataGridTitle">标题</param>
            <param name="dataGrid">表格</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.ReportExportExcel(System.Web.UI.Page,System.String,System.Int32,System.Web.UI.WebControls.DataGrid)">
            <summary>
            将htmlTable中的数据导出到指定的Excel文件中
            </summary>
            <param name="page">web页面</param>
            <param name="fileName">文件名</param>
            <param name="titleWidth">标题宽度</param>
            <param name="dataGrid">表格</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.DataTableToExcel(System.Data.DataTable,System.Web.HttpResponse,System.String)">
            <summary>
            DataTable保存到Excel
            </summary>
            <param name="table">DataTable</param>
            <param name="response">p_Response</param>
            <param name="title">Excel文件名</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.ListToExcel``1(System.Collections.Generic.IList{``0},System.Web.HttpResponse,System.String)">
            <summary>
            DataTable保存到Excel
            </summary>
            <param name="entityList">List</param>
            <param name="response">p_Response</param>
            <param name="title">Excel文件名</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.ListToExcel(System.Collections.Generic.IList{System.Object},System.Web.HttpResponse,System.String)">
            <summary>
            DataTable保存到Excel
            </summary>
            <param name="entityList">List</param>
            <param name="response">p_Response</param>
            <param name="title">Excel文件名</param>
        </member>
        <member name="M:Enterprise.Framework.File.ReportExport.HtmlTagContentToExcel(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            将网页内容导出至 Excel 中
            </summary>
            <param name="page">网页实例</param>
            <param name="htmlTagContent">导出至 Excel 中的 Html 内容。
            如：ASPX 页面有 id 为 divExportContent 的 div。后台调用方法：ExportToExcel(this, "测试导出Excel", divExportContent.InnerHtml);
            </param>
            <param name="fileName">导出 Excel 文件名</param>
            <param name="filterRegex">要过滤 HTML 内容的正则表达式</param>
        </member>
        <member name="T:Enterprise.Framework.FormsAuth.FormsPrincipal`1">
            <summary>
            用户身份验证
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.#ctor(System.Web.Security.FormsAuthenticationTicket,`0)">
            <summary>
            
            </summary>
            <param name="ticket"></param>
            <param name="userData"></param>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.IsInRole(System.String)">
            <summary>
            
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.SignIn(System.String,Enterprise.Framework.FormsAuth.LoginUser,System.Int32)">
            <summary>
                执行用户登录操作
            </summary>
            <param name="loginName">登录名</param>
            <param name="userData">与登录名相关的用户信息</param>
            <param name="expiration">登录Cookie的过期时间，单位：分钟。</param>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.TryParsePrincipal(System.Web.HttpRequest)">
            <summary>
                尝试从HttpRequest.Cookies中构造一个MyFormsPrincipal对象
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.SetAccountInfo(System.Web.HttpContext)">
            <summary>
                根据HttpContext对象设置用户标识对象
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.FormsPrincipal`1.GetAccount(System.Web.HttpContext)">
            <summary>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.FormsPrincipal`1.UserInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.FormsPrincipal`1.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.FormsAuth.LoginUser">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.LoginUser.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="accountid">登录账号Id</param>
            <param name="accountname">姓名</param>
            <param name="accountnumber">账号</param>
            <param name="jobnumber">工号</param>
            <param name="orgid">组织机构Id</param>
            <param name="comid">公司机构Id</param>
            <param name="roleid">角色</param>
        </member>
        <member name="M:Enterprise.Framework.FormsAuth.LoginUser.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.Id">
            <summary>
                Id
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountName">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountNumber">
            <summary>
                用户账号
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountJobNumber">
            <summary>
                工号
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountOrgId">
            <summary>
                部门ID
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountComId">
            <summary>
                公司Id
            </summary>
        </member>
        <member name="P:Enterprise.Framework.FormsAuth.LoginUser.AccountRoleId">
            <summary>
                角色
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Mail.LHSendMail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.LHSendMail.Send(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary> 
            发送邮件 
            </summary> 
            <param name="from">发送人邮件地址</param> 
            <param name="to">接收人邮件地址</param> 
            <param name="subject">邮件主题</param> 
            <param name="isBodyHtml">是否是Html</param> 
            <param name="body">邮件体</param> 
            <param name="smtpHost">SMTP服务器地址,例如:smtp.163.com</param> 
            <param name="userName">用户名</param> 
            <param name="password">密码</param> 
            <returns>是否成功</returns> 
        </member>
        <member name="T:Enterprise.Framework.Queue.IQueueProcessor">
            <summary>
            Queue processing interface.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueProcessor.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueProcessor.GetStatus">
            <summary>
            Gets information about the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Enterprise.Framework.Queue.IQueueProcessor`1">
            <summary>
            Queue processing interface w/ specific type.
            </summary>
            <typeparam name="T">Type of items to store in queue.</typeparam>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueProcessor`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueProcessor`1.Dequeue">
            <summary>
            Dequeues a single item from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="P:Enterprise.Framework.Queue.IQueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="T:Enterprise.Framework.Queue.IQueueRepository`1">
            <summary>
            Interface for a persistance queue repository.
            </summary>
            <typeparam name="T">Type of items to store in repository.</typeparam>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueRepository`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueRepository`1.LoadAll">
            <summary>
            Loads all.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.IQueueRepository`1.LoadBatch">
            <summary>
            Loads the batch.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="T:Enterprise.Framework.Queue.QueueProcessActionContext">
            <summary>
            Action context when performing various actions on the processing queue.
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessActionContext.BatchSize">
            <summary>
            Gets or sets the size of the batch.
            </summary>
            <value>The size of the batch.</value>
        </member>
        <member name="T:Enterprise.Framework.Queue.QueueProcessor`1">
            <summary>
            Controlls the processing of the notification tasks.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Enterprise.Framework.Queue.QueueProcessor`1"/> class.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.#ctor(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.#ctor(System.Int32,System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="numberOfItemsToProcessPerDequeue">Number of items to process per dequeue.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.Enqueue(`0)">
            <summary>
            Add a message to the queue.
            </summary>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.Dequeue">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <returns>Dequeued item.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.GetStatus">
            <summary>
            Get the state of the queue.
            </summary>
            <returns>Status of queue.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.Process(System.Collections.Generic.IList{`0})">
            <summary>
            Processes the specified items to process.
            </summary>
            <param name="itemsToProcess">The items to process.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.DequeueInternal(System.Int32)">
            <summary>
            Dequeues the internal.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueProcessor`1.UpdateState(Enterprise.Framework.Queue.QueueProcessState,System.Boolean)">
            <summary>
            Updates the state.
            </summary>
            <param name="newState">The new state.</param>
            <param name="performLock">if set to <c>true</c> [perform lock].</param>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessor`1.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Enterprise.Framework.Queue.QueueProcessState">
            <summary>
            State of the Queue Processor
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueProcessState.Idle">
            <summary>
            Queue processor is idle.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueProcessState.Busy">
            <summary>
            Queue processor is busy.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueProcessState.Stopped">
            <summary>
            Queue processor is stopped.
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Queue.QueueProcessorSettings">
            <summary>
            Settings for the processing queue.
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Queue.QueueProcessorSettings.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="T:Enterprise.Framework.Queue.Queues">
            <summary>
            This class serves as a controller for queues processors.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.Queues._queues">
            <summary>
            Named queues.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessorFor``1(System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessorFor``1(System.Int32,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="itemsToDequeuePerProcess">Number of items to dequeue on dequeue operation.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}},System.Int32)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
            <param name="itemsToDequeue">Number of items to dequeue on dequeue operation.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessor``1(Enterprise.Framework.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.AddProcessor(System.String,Enterprise.Framework.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <param name="name">Name of queue processor.</param>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.ContainsProcessorFor``1">
            <summary>
            Whether or not there is a named handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if a queue processor exists for this type.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Enqueue``1(``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Enqueue``1(System.String,``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Enqueue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="items">List with items to enqueue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Enqueue``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="items">List of items to enqueue.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Process``1">
            <summary>
            Process the queue handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.Process(System.String)">
            <summary>
            Process the queue handler associated w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.IsBusy``1">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is busy.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.IsBusy(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.IsIdle``1">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is idle.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.IsIdle(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.GetQueue``1">
            <summary>
            Get the queue processor for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>Appointed queue processor.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.GetMetaInfo">
            <summary>
            Get the metainfo for all the queues.
            </summary>
            <returns>List with status for all queue processors.</returns>
        </member>
        <member name="M:Enterprise.Framework.Queue.Queues.GetQueue(System.String)">
            <summary>
            Get queue processor w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>Queue processor with specified name.</returns>
        </member>
        <member name="T:Enterprise.Framework.Queue.QueueStatus">
            <summary>
            This class can hold the status of a queue processor.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.State">
            <summary>
            The current state of the queue.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.Count">
            <summary>
            Number of items still in the queue.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.DequeueSize">
            <summary>
            How many items are dequeued from this queue each time.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Queue.QueueStatus.TotalProcessed">
            <summary>
            Total number of times that have been processed.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Queue.QueueStatus.#ctor(Enterprise.Framework.Queue.QueueProcessState,System.Int32,System.DateTime,System.Int32,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Enterprise.Framework.Queue.QueueStatus"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="countItemsRemaining">The count.</param>
            <param name="lastProcessDate">The last process date.</param>
            <param name="numberOfTimesProcessed">Number of times items were processed.</param>
            <param name="elaspedTime">Time elapsed since the last item was processed.</param>
            <param name="totalProcessed">Total number of items processed.</param>
            <param name="dequeueSize">Size of the dequeue.</param>
        </member>
        <member name="T:Enterprise.Framework.SMS.Sms1086Interface">
            <summary>
             http://www.sms1086.com/plan/api/
            </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.Sms1086Interface.Sms1086Api">
            <summary>
            API
            </summary>
        </member>
        <member name="M:Enterprise.Framework.SMS.Sms1086Interface.Send(System.String,System.String)">
            <summary>
                短信发送接口
            </summary>
            <param name="mobiles">电话号码（多号码用，分隔）</param>
            <param name="content">短信内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.SMS.Sms1086Interface.HttpGet(System.String)">
            <summary>
            调用远程API发送短信
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.SMS.SmsStatus">
            <summary>
            短信状态
            </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S0">
             <summary>
            发送短信成功
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S1">
             <summary>
            提交参数不能为空
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S2">
             <summary>
            用户名或密码错误
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S3">
             <summary>
            账号未启用
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S4">
             <summary>
            计费账号无效
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S5">
             <summary>
            定时时间无效
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S6">
             <summary>
            业务未开通
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S7">
             <summary>
            权限不足
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S8">
             <summary>
            余额不足
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S9">
             <summary>
            号码中含有无效号码
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S10">
             <summary>
            内容中含有非法关键字
             </summary>
        </member>
        <member name="F:Enterprise.Framework.SMS.SmsStatus.S11">
             <summary>
            系统错误
             </summary>
        </member>
        <member name="T:Enterprise.Framework.Utils.Register">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetDiskVolumeSerialNumber">
            <summary>
                取得设备硬盘的卷标号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetCpu">
            <summary>
                获得CPU的序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetNetMacAddress">
            <summary>
                取得设备网卡的mac地址
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetMNum">
            <summary>
                生成机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetRNum(System.DateTime)">
            <summary>
                生成注册码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.GetRegistRNum(System.String)">
            <summary>
                取出注册码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Register.VerifyRegist(System.DateTime@,System.String)">
            <summary>
                验证注册
            </summary>
            <param name="expiryDate"></param>
            <param name="rNumPath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.RmbHelper.Convert(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:Enterprise.Framework.Utils.RmbHelper.Convert(System.String)">
            <summary> 
            一个重载，将字符串先转换成数字在调用CmycurD(decimal num) 
            </summary> 
            <param name="numstr">用户输入的金额，字符串形式未转成decimal</param>
            <returns></returns> 
        </member>
        <member name="T:Enterprise.Framework.Utils.SequenceGuid">
            <summary>
                
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SequenceGuid.GetGuid">
            <summary>
                
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SequenceGuid.GetGuidReplace">
            <summary>
                
            </summary>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Utils.Utility">
            <summary>
            Utility 的摘要说明。
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToObjectString(System.Object)">
            <summary>
            返回对象_object的String值,_object为null时返回空值。
            </summary>
            <param name="_object"></param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToInt(System.Object)">
            <summary>
            将对象转换为数值(Int32)类型,转换失败返回-1。
            </summary>
            <param name="_object">对象。</param>
            <returns>Int32数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为数值(Int32)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Int32数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToLong(System.Object)">
            <summary>
            将对象转换为数值(Long)类型,转换失败返回-1。
            </summary>
            <param name="_object">对象。</param>
            <returns>Long数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToLong(System.Object,System.Int64)">
            <summary>
            将对象转换为数值(Long)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Long数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDecimal(System.Object)">
            <summary>
            将对象转换为数值(Decimal)类型,转换失败返回-1。
            </summary>
            <param name="_object">对象。</param>
            <returns>Decimal数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将对象转换为数值(Decimal)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Decimal数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDouble(System.Object)">
            <summary>
            将对象转换为数值(Double)类型,转换失败返回-1。
            </summary>
            <param name="_object">对象。</param>
            <returns>Double数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDouble(System.Object,System.Double)">
            <summary>
            将对象转换为数值(Double)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Double数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToFloat(System.Object)">
            <summary>
            将对象转换为数值(Float)类型,转换失败返回-1。
            </summary>
            <param name="_object">对象。</param>
            <returns>Float数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToFloat(System.Object,System.Single)">
            <summary>
            将对象转换为数值(Float)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Float数值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDateTime(System.Object)">
            <summary>
            将对象转换为数值(DateTime)类型,转换失败返回Now。
            </summary>
            <param name="_object">对象。</param>
            <returns>DateTime值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换为数值(DateTime)类型。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>DateTime值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToByteByBool(System.Object)">
            <summary>
            从Boolean转换成byte,转换失败返回0。
            </summary>
            <param name="_object">对象。</param>
            <returns>Byte值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToByteByBool(System.Object,System.Byte)">
            <summary>
            从Boolean转换成byte。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Byte值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToBoolByByte(System.Object)">
            <summary>
            从byte转换成Boolean,转换失败返回false。
            </summary>
            <param name="_object">对象。</param>
            <returns>Boolean值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToBoolByByte(System.Object,System.Boolean)">
            <summary>
            从byte转换成Boolean。
            </summary>
            <param name="_object">对象。</param>
            <param name="returnValue">转换失败返回该值。</param>
            <returns>Boolean值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsEmpty(System.String)">
            <summary>
            判断文本_object是否为空值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Boolean值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsDateTime(System.Object)">
            <summary>
            判断对象是否为正确的日期值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Boolean。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsInt(System.Object)">
            <summary>
            判断对象是否为正确的Int32值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Int32值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsLong(System.Object)">
            <summary>
            判断对象是否为正确的Long值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Long值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsFloat(System.Object)">
            <summary>
            判断对象是否为正确的Float值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Float值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsDouble(System.Object)">
            <summary>
            判断对象是否为正确的Double值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Double值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsDecimal(System.Object)">
            <summary>
            判断对象是否为正确的Decimal值。
            </summary>
            <param name="_object">对象。</param>
            <returns>Decimal值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.StringTrimAll(System.String)">
            <summary>
            去除字符串的所有空格。
            </summary>
            <param name="text">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.NumricTrimAll(System.String)">
            <summary>
            去除数值字符串的所有空格。
            </summary>
            <param name="numricString">数值字符串</param>
            <returns>String</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ArrayFind(System.Array,System.Object)">
            <summary>
            在数组中查找匹配对象类型
            </summary>
            <param name="array">数组</param>
            <param name="_object">对象</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ArrayFind(System.Array,System.String,System.Boolean)">
            <summary>
            在数组中查找匹配字符串
            </summary>
            <param name="array">数组</param>
            <param name="_object">对象</param>
            <param name="unUpLower">是否忽略大小写</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ReplaceInvertedComma(System.String)">
            <summary>
            替换字符串中的单引号。
            </summary>
            <param name="inputString">字符串</param>
            <returns>String</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            判断两个字节数组是否具有相同值.
            </summary>
            <param name="bytea">字节1</param>
            <param name="byteb">字节2</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.BuildDate(System.String)">
            <summary>
            日期智能生成。
            </summary>
            <param name="inputText">字符串</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsFileExists(System.String)">
            <summary>
            检查文件是否真实存在。
            </summary>
            <param name="path">文件全名（包括路径）。</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsDirectoryExists(System.String)">
            <summary>
            检查目录是否真实存在。
            </summary>
            <param name="path">目录路径.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.FindLineTextFromFile(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            查找文件中是否存在匹配行。
            </summary>
            <param name="fi">目标文件.</param>
            <param name="lineText">要查找的行文本.</param>
            <param name="lowerUpper">是否区分大小写.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.IsRightParent(System.Data.DataTable,System.String,System.String,System.String,System.String)">
            <summary>
            判断父子级关系是否正确。
            </summary>
            <param name="table">数据表。</param>
            <param name="columnName">子键列名。</param>
            <param name="parentColumnName">父键列名。</param>
            <param name="inputString">子键值。</param>
            <param name="compareString">父键值。</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.SearchChild(System.Collections.ArrayList,System.Data.DataTable,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="parentColumnName"></param>
            <param name="inputString"></param>
            <param name="compareString"></param>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.Fomatdate(System.DateTime,System.String)">
            <summary>
            格式化日期类型，返回字符串
            </summary>
            <param name="dtime">日期</param>
            <param name="s">日期年月日间隔符号</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.Datediff(System.DateTime,System.DateTime)">
            <summary>
            返回日期差
            </summary>
            <param name="sdmin">开始日期</param>
            <param name="sdmax">结束日期</param>
            <returns>日期差：负数为失败</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.Datediff(System.String,System.String)">
            <summary>
            返回日期差
            </summary>
            <param name="sdmin">开始日期</param>
            <param name="sdmax">结束日期</param>
            <returns>日期差：负数为失败</returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ConvertStr(System.String)">
            <summary>
            将用户输入的字符串转换为可换行、替换Html编码、无危害数据库特殊字符、去掉首尾空白、的安全方便代码。
            </summary>
            <param name="inputString">用户输入字符串</param>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.InputText(System.String)">
            <summary>
            
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.OutputText(System.String)">
            <summary>
            将html代码显示在网页上
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ToUrl(System.String)">
            <summary>
            
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.GetSafeCode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.SetTableRows(System.Data.DataTable,System.Int32)">
            <summary>
            设置绑定到DataGrid的DataTable的记录行数，如不够则添加空行
            </summary>
            <param name="myDataTable">数据表</param>
            <param name="intPageCount">DataGrid分页时每页行数</param>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.GetGuid(System.String)">
            <summary>
            GetGuid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.ReadConfig(System.String)">
            <summary>
            AppSettings
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.Utility.GetSubString(System.String,System.Int32)">
            <summary>   
            截取文本，区分中英文字符，中文算两个长度，英文算一个长度
            </summary>
            <param name="str">待截取的字符串</param>
            <param name="length">需计算长度的字符串</param>
            <returns>string</returns>
        </member>
        <member name="T:Enterprise.Framework.Web.ApplicationConstant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.LoginPage">
            <summary>
            用户登录画面
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.CompanyID">
            <summary>
            公司组织顶级值
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.ADD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.EDIT">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.DELETE">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.DEAL">
            <summary>
            处理
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.UPDATE">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.ApplicationConstant.VIEW">
            <summary>
            查看
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.OrgnizationType">
            <summary>
            组织机构类型
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.OrgnizationType.DEPT">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.OrgnizationType.GROUP">
            <summary>
            组
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.WebAction">
            <summary>
            // 摘要:
                应用程序请求动作。
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Add">
            <summary>
                新增
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Edit">
            <summary>
                编辑
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Delete">
            <summary>
                删除
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Deal">
            <summary>
                处理
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Update">
            <summary>
                更新
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Details">
            <summary>
                查看
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Web.WebAction.Audit">
            <summary>
                审核
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Cache.Cache">
            <summary>
            Cache操作类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Cache.Cache.Insert(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            简单创建/修改Cache，前提是这个值是字符串形式的
            </summary>
            <param name="key">Cache名称</param>
            <param name="value">Cache值</param>
            <param name="iExpires">有效期，秒数（使用的是当前时间+秒数得到一个绝对到期值）</param>
            <param name="priority">保留优先级，1最不会被清除，6最容易被内存管理清除（1:NotRemovable；2:High；3:AboveNormal；4:Normal；5:BelowNormal；6:Low）</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.Cache.Get(System.String)">
            <summary>
            简单读Cache对象的值，前提是这个值是字符串形式的
            </summary>
            <param name="key">Cache名称</param>
            <returns>Cache字符串值</returns>
        </member>
        <member name="M:Enterprise.Framework.Cache.Cache.Del(System.String)">
            <summary>
            删除Cache对象
            </summary>
            <param name="key">Cache名称</param>
        </member>
        <member name="T:Enterprise.Framework.Cache.CacheHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Cache.CacheHelper.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Cache.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="cacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="cacheKey"></param>
            <param name="objObject"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="T:Enterprise.Framework.Cache.DefaultCacheStrategy">
            <summary>
            默认缓存管理类
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Cache.ICacheStrategy">
            <summary>
            公共缓存策略接口
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.AddObject(System.String,System.Object)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId"></param>
            <param name="o"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.AddObject(System.String,System.Object,System.Int32)">
            <summary>
            添加指定ID的对象
            </summary>
            <param name="objId"></param>
            <param name="o"></param>
            <param name="timeOut">过期时间</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.AddObjectWithFileChange(System.String,System.Object,System.String[])">
            <summary/>
            添加指定ID的对象(关联指定文件组)
            
            <param name="objId"></param>
            <param name="o"></param>
            <param name="files"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.AddObjectWithFileChange(System.String,System.Object,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary/>
            添加指定ID的对象(关联指定文件组)
            
            <param name="objId"></param>
            <param name="o"></param>
            <param name="callback"></param>
            <param name="files"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.AddObjectWithDepend(System.String,System.Object,System.String[])">
            <summary>
            添加指定ID的对象(关联指定键值组)
            </summary>
            <param name="objId"></param>
            <param name="o"></param>
            <param name="dependKey"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.RemoveObject(System.String)">
            <summary>
            移除指定ID的对象
            </summary>
            <param name="objId"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.RetrieveObject(System.String)">
            <summary>
            返回指定ID的对象
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Cache.ICacheStrategy.RetrieveObject``1(System.String)">
            <summary>
            返回指定ID的对象
            </summary>
            <param name="objId"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.Cache.ICacheStrategy.TimeOut">
            <summary>
            到期时间,单位：秒
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Cache.DefaultCacheStrategy._timeOut">
            <summary>
            默认缓存存活期为3600秒(1小时)
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObjectWith(System.String,System.Object)">
            <summary>
            加入当前对象到缓存中
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObjectWithFileChange(System.String,System.Object,System.String[])">
            <summary>
            加入当前对象到缓存中,并对相关文件建立依赖
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="files">监视的路径文件</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObjectWithFileChange(System.String,System.Object,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary>
            加入当前对象到缓存中,并对相关文件建立依赖
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="callback"></param>
            <param name="files">监视的路径文件</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObjectWithDepend(System.String,System.Object,System.String[])">
            <summary>
            加入当前对象到缓存中,并使用依赖键
            </summary>
            <param name="objId">对象的键值</param>
            <param name="o">缓存的对象</param>
            <param name="dependKey">依赖关联的键值</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.OnRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            建立回调委托的一个实例
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.RemoveObject(System.String)">
            <summary>
            删除缓存对象
            </summary>
            <param name="objId">对象的关键字</param>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.RetrieveObject(System.String)">
            <summary>
            返回一个指定的对象
            </summary>
            <param name="objId">对象的关键字</param>
            <returns>对象</returns>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.RetrieveObject``1(System.String)">
            <summary>
            返回指定ID的对象
            </summary>
            <param name="objId"></param>
            <typeparam name="T">返回数据的类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Cache.DefaultCacheStrategy.AddObject(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="objId"></param>
            <param name="o"></param>
            <param name="timeOut"></param>
        </member>
        <member name="P:Enterprise.Framework.Cache.DefaultCacheStrategy.TimeOut">
            <summary>
            设置到期相对时间[单位: 秒] 
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Cache.DefaultCacheStrategy.GetWebCacheObj">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.DataBase.DbContextHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.DataBase.DbContextHelper.CreateDbContextByConnStr(System.String)">
            <summary>
            返回一个依据指定数据库连接字符串创建的DbContext实例
            </summary>
            <param name="connStr">指定数据库连接字符</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.DataBase.DbContextHelper.CreateDbContextByEdmxName(System.String)">
            <summary>
            返回一个依据指定模型名称创建的DbContext实例
            </summary>
            <param name="edmxName">指定模型名称</param>
            <returns>指定数据库连接名称</returns>
        </member>
        <member name="M:Enterprise.Framework.DataBase.DbContextHelper.CreateDbContextByEdmxNameAndConnName(System.String,System.String)">
            <summary>
            返回一个依据指定模型名称和指定数据库连接名称创建的DbContext实例
            </summary>
            <param name="edmxName">指定模型名称</param>
            <param name="connName">指定数据库连接名称</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Encoding.IdentifyEncoding">
            <summary>
            检测字符编码的类
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <![CDATA[
            <strong>IdentifyEncoding</strong> 用来检测 <see cref="Uri"/>,<see cref="System.IO.FileInfo"/>,<see cref="sbyte"/> 字节数组的编码．
            Create By lion  <br/>
            2005-02-21 22:00  <br/>
            Support .Net Framework v1.1.4322 <br/> 
            WebSite：www.lionsky.net(lion-a AT sohu.com) <br/> 
            ]]>
            </remarks>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.#ctor">
            <summary>
            初始化 <see cref="T:Enterprise.Framework.Encoding.IdentifyEncoding"/> 的实例
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.GetEncodingName(System.Uri)">
            <summary>
            从指定的 <see cref="T:System.Uri"/> 中判断编码类型
            </summary>
            <param name="testurl">要判断的 <see cref="T:System.Uri"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new Uri("http://china5.nikkeibp.co.jp/china/news/com/200307/pr_com200307170131.html")));  
            </code>
            </example>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.GetEncodingName(System.IO.FileInfo)">
            <summary>
            从指定的 <see cref="T:System.IO.FileInfo"/> 中判断编码类型
            </summary>
            <param name="testfile">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new System.IO.FileInfo(@"C:\test.txt")));  
            </code>
            </example>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.GetEncoding(System.String)">
            <summary>
            
            </summary>
            <param name="encodingName"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.GetEncodingName(System.SByte[])">
            <summary>
            从指定的 <see cref="T:System.SByte"/> 字节数组中判断编码类型
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(IdentifyEncoding.ToSByteArray(System.Text.Encoding.GetEncoding("gb2312").GetBytes("Lion互动网络(www.lionsky.net)")))); 
            </code>
            </example>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Gb2312Probability(System.SByte[])">
            <summary>
            判断是GB2312编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.GbkProbability(System.SByte[])">
            <summary>
            判断是GBK编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.HzProbability(System.SByte[])">
            <summary>
            判断是HZ编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Big5Probability(System.SByte[])">
            <summary>
            判断是BIG5编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.EnctwProbability(System.SByte[])">
            <summary>
            判断是CNS11643(台湾)编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Iso2022CnProbability(System.SByte[])">
            <summary>
            判断是ISO2022CN编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Utf8Probability(System.SByte[])">
            <summary>
            判断是UTF8编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.UnicodeProbability(System.SByte[])">
            <summary>
            判断是Unicode编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.AsciiProbability(System.SByte[])">
            <summary>
            判断是ASCII编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Initialize_Frequencies">
            <summary>
            初始化必要的条件
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ToByteArray(System.SByte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.SByte"/> 字符数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sbyteArray">要转换的 <see cref="T:System.SByte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ToByteArray(System.String)">
            <summary>
            将此实例中的指定字符串转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ToByteArray(System.Object[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Object"/> 数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="tempObjectArray">要转换的 <see cref="T:System.Object"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ToSByteArray(System.Byte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Byte"/> 字符数组转换到 <see cref="T:System.SByte"/> 字符数组。
            </summary>
            <param name="byteArray">要转换的 <see cref="T:System.Byte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.SByte"/> 字符数组</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从流读取字节序列,并将此流中的位置提升读取的字节数.</summary>
            <param name="sourceStream">要读取的流.</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.ReadInput(System.IO.TextReader,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从字符系列读取字节序列,并将此字符系列中的位置提升读取的字节数。</summary>
            <param name="sourceTextReader">要读取的流。</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.FileLength(System.IO.FileInfo)">
            <summary>
            检测当前文件的大小
            </summary>
            <param name="file">被检测的文件</param>
            <returns>当前文件的大小。</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:Enterprise.Framework.Encoding.IdentifyEncoding.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2">
            <summary>
                实体框架数据仓储的基类
            </summary>
            <typeparam name="TContext">提供用于查询和使用对象形式的实体数据的功能的实体上下文</typeparam>
            <typeparam name="T">表示用于执行创建、读取、更新和删除操作的类型化实体集</typeparam>
        </member>
        <member name="T:Enterprise.Framework.EntityRepository.IRepository`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.All">
            <summary>
                返回一个 System.Linq.IQueryable
            </summary>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                返回一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},Enterprise.Framework.EntityRepository.OrderingOrders,System.Int32@)">
            <summary>
                返回一个 System.Linq.IQueryable，包含满足由 predicate 和 分页参数
                指定的条件的元素，并根据键对其元素排序
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页码</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序类型</param>
            <param name="recCount">总数量</param>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 和 分页参数
                指定的条件的元素，并根据键对其元素排序</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Where``1(System.String,System.Object[])">
            <summary>
             返回一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <typeparam name="TKey"></typeparam>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>单个元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Single``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>单个元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                返回序列中满足指定条件的唯一元素；如果序列中不包含任何元素，则返回默认值
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>唯一元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回序列中满足指定条件的唯一元素；如果序列中不包含任何元素，则返回默认值
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>唯一元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                返回指定序列中满足条件的元素数量
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>元素数量</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Add(`0)">
            <summary>
                将对象添加到当前实体集中的对象上下文
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Delete(`0)">
            <summary>
                将对象标记为待删除
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                将满足 predicate 指定的条件的元素对象标记为待删除
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.IRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
                将满足 predicate 指定的条件的元素对象更新为满足 updatePredicate 条件的属性；如果 IsOwnContex == true，将对象保存到数据源
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="updatePredicate">用于构建对象的函数</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="F:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2._dbSet">
            <summary>
                表示用于执行创建、读取、更新和删除操作的类型化实体集
            </summary>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.#ctor">
            <summary>
                
            </summary>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.All">
            <summary>
                返回一个 System.Linq.IQueryable
            </summary>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Where(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
                返回一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>一个 System.Linq.IQueryable，包含满足由 predicate 指定的条件的元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Where``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``0}},Enterprise.Framework.EntityRepository.OrderingOrders,System.Int32@)">
            <summary>
                返回一个 System.Linq.IQueryable<T>，包含满足由 predicate 和 分页参数 指定的条件的元素，并根据键对其元素排序</T>
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页码</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序类型</param>
            <param name="recCount">总数量</param>
            <returns>一个 System.Linq.IQueryable<T/>，包含满足由 predicate 和 分页参数 指定的条件的元素，并根据键对其元素排序</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Where``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回一个 System.Linq.IQueryable<T/>，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>一个 System.Linq.IQueryable<T/>，包含满足由 predicate 指定的条件的元素，并根据键对其元素排序</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Where``1(System.String,System.Object[])">
            <summary>
            通过SQL查询数据结果
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Single(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
                返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>单个元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Single``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>单个元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
                返回序列中满足指定条件的唯一元素；如果序列中不包含任何元素，则返回默认值
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>唯一元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},Enterprise.Framework.EntityRepository.OrderingOrders)">
            <summary>
                返回序列中满足指定条件的唯一元素；如果序列中不包含任何元素，则返回默认值
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="orderingSelector">用于从元素中提取键的函数</param>
            <param name="orderBy">排序</param>
            <returns>唯一元素</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
                返回指定序列中满足条件的元素数量
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>元素数量</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Add(`1)">
            <summary>
                将对象添加到当前实体集中的对象上下文；如果 IsOwnContex == true，将对象保存到数据源
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Delete(`1)">
            <summary>
                将对象标记为待删除；如果 IsOwnContex == true，将对象保存到数据源
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
                将满足 predicate 指定的条件的元素对象标记为待删除；
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Update(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,`1}})">
            <summary>
                将满足 predicate 指定的条件的元素对象更新为满足 updatePredicate 条件的属性；
            </summary>
            <param name="predicate">用于测试每个元素是否满足条件的函数</param>
            <param name="updatePredicate">用于构建对象的函数</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.AddEntity(`1)">
            <summary>
                临时把实休对象保存在管理对象中
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.SaveChanges">
            <summary>
                将所有更新保存到数据源并重置对象上下文中的更改跟踪。
            </summary>
            <returns>
                在调用 System.Data.Objects.ObjectContext.SaveChanges() 时处于
                System.Data.EntityState.Added、System.Data.EntityState.Modified或 System.Data.EntityState.Deleted 状态的对象数。
            </returns>
        </member>
        <member name="P:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Context">
            <summary>
                提供用于查询和使用对象形式的实体数据的功能的实体上下文
            </summary>
        </member>
        <member name="P:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.ObjContext">
            <summary>
                提供用于查询和使用对象形式的实体数据的功能的实体上下文
            </summary>
        </member>
        <member name="P:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.Set">
            <summary>
                表示用于执行创建、读取、更新和删除操作的类型化实体集
            </summary>
        </member>
        <member name="P:Enterprise.Framework.EntityRepository.EntityRepositoryBase`2.IsOwnContext">
            <summary>
                是否拥有上下文
            </summary>
        </member>
        <member name="T:Enterprise.Framework.EntityRepository.OrderingOrders">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.EntityRepository.OrderingOrders.ASC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.EntityRepository.OrderingOrders.DESC">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Enum.EnumDescription">
            <summary>
                把枚举值按照指定的文本显示
                <remarks>
                    一般通过枚举值的ToString()可以得到变量的文本，
                    但是有时候需要的到与之对应的更充分的文本，
                    这个类帮助达到此目的
                </remarks>
            </summary>
            <example>
                [EnumDescription("中文数字")]
                enum MyEnum
                {
                [EnumDescription("数字一")]
                One = 1,
                [EnumDescription("数字二")]
                Two,
                [EnumDescription("数字三")]
                Three
                }
                EnumDescription.GetEnumText(typeof(MyEnum));
                EnumDescription.GetFieldText(MyEnum.Two);
                EnumDescription.GetFieldTexts(typeof(MyEnum));
            </example>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.#ctor(System.String,System.Int32)">
            <summary>
                描述枚举值
            </summary>
            <param name="enumDisplayText">描述内容</param>
            <param name="enumRank">排列顺序</param>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.#ctor(System.String)">
            <summary>
                描述枚举值，默认排序为5
            </summary>
            <param name="enumDisplayText">描述内容</param>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.GetEnumText(System.Type)">
            <summary>
                得到对枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.GetFieldText(System.Object)">
            <summary>
                获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.GetFieldTexts(System.Type)">
            <summary>
                得到枚举类型定义的所有文本，按定义的顺序返回
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>所有定义的文本</returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumDescription.GetFieldTexts(System.Type,Enterprise.Framework.Enum.SortType)">
            <summary>
                得到枚举类型定义的所有文本
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="sortType">指定排序类型</param>
            <returns>所有定义的文本</returns>
        </member>
        <member name="P:Enterprise.Framework.Enum.EnumDescription.EnumDisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Enum.EnumDescription.EnumRank">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Enum.EnumDescription.EnumValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Enum.EnumDescription.FieldName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Enum.EnumHelper">
            <summary>
                Function：枚举类型的辅助类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumHelper.ParseEnumByString``1(System.String)">
            <summary>
                提供枚举元素的文本，根据指定枚举类型，返回对应的枚举元素
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumString">枚举元素的文本</param>
            <returns>枚举元素的文本对应的枚举元素</returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumHelper.ParseEnumByDesc``1(System.String)">
            <summary>
                提供枚举元素的描述，根据指定枚举类型，返回对应的枚举元素
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumDesc">枚举元素的描述</param>
            <returns>枚举元素的描述对应的枚举元素</returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumHelper.ParseEnumValueByString``1(System.String)">
            <summary>
                提供枚举元素的文本，根据指定枚举类型，返回对应的枚举元素的值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumString">枚举元素的文本</param>
            <returns>枚举元素的文本对应的枚举元素的值</returns>
        </member>
        <member name="M:Enterprise.Framework.Enum.EnumHelper.ParseEnumValueByDesc``1(System.String)">
            <summary>
                提供枚举元素的描述，根据指定枚举类型，返回对应的枚举元素的值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumDesc">枚举元素的描述</param>
            <returns>枚举元素的描述对应的枚举元素的值</returns>
        </member>
        <member name="T:Enterprise.Framework.Enum.SortType">
            <summary>
                排序类型
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Enum.SortType.Default">
            <summary>
                按枚举顺序默认排序
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Enum.SortType.DisplayText">
            <summary>
                按描述值排序
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Enum.SortType.Rank">
            <summary>
                按排序熵
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Event.ShareEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnShareActive(System.Collections.Generic.List{System.String},Enterprise.Framework.Event.MoreEventArgs)">
            <summary>
            触发共享数据发送事件
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnAutoShareArticles(System.String)">
            <summary>
            触发共享数据发送事件
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnFetchShareDataCommand(System.String)">
            <summary>
            触发获取共享数据事件
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnLoadChannelShareConfig(System.Int32,Enterprise.Framework.Event.MoreEventArgs)">
            <summary>
            加载栏目共享通道配置页面ascx
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnGetShareTargetSites(System.String,Enterprise.Framework.Event.MoreEventArgs)">
            <summary>
             
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnFeedBackShareData(System.String,Enterprise.Framework.Event.MoreEventArgs)">
            <summary>
             
            </summary>
            <param></param>
            <param name="objectId"></param>
            <param name="e"></param>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnSubmitSiteShareData(System.String,Enterprise.Framework.Event.MoreEventArgs)">
            <summary>
             
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnGetSharedCommand(System.String)">
            <summary>
            
            </summary>
            <param name="objectId"></param>
        </member>
        <member name="M:Enterprise.Framework.Event.ShareEvent.OnPublishSharedCommand(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.ShareActive">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.AutoShareArticles">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.FetchShareDataCommand">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.LoadChannelShareConfig">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.GetShareTargetSites">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.FeedBackShareData">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.SubmitSiteShareData">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.GetSharedCommand">
            <summary>
            
            </summary>
        </member>
        <member name="E:Enterprise.Framework.Event.ShareEvent.PublishSharedCommand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Event.MoreEventArgs">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Event.MoreEventArgs.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Event.MoreEventArgs.ReturnObject">
            <summary>
            返回对象
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.Computer">
            <summary>
                取客户端与服务端信息
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadFile.FileNameExtension(System.String)">
            <summary>
            参数为虚拟路径
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadFile.MapPathFile(System.String)">
            <summary>
            获取物理地址
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadFile.DownLoadold(System.String)">
            <summary>
            普通下载
            </summary>
            <param name="fileName">文件虚拟路径</param>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadFile.DownLoad(System.String)">
            <summary>
            分块下载
            </summary>
            <param name="fileName">文件虚拟路径</param>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadFile.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="request">Page.Request对象</param>
            <param name="response">Page.Response对象</param>
            <param name="fileName">下载文件名</param>
            <param name="fullPath">带文件名下载路径</param>
            <param name="speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.DownloadUtil.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="request">Page.Request对象</param>
            <param name="response">Page.Response对象</param>
            <param name="fileName">下载文件名</param>
            <param name="fullPath">带文件名下载路径</param>
            <param name="speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:Enterprise.Framework.Web.LHJsonHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.LHJsonHelper.JsonResult(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Log.LogUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Log.LogUtil.ErrorLog(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Enterprise.Framework.Log.LogUtil.InfoLog(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Enterprise.Framework.Log.LogUtil.ErrorLog(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Enterprise.Framework.Log.LogUtil.WriteLog(System.String,System.String,System.String)">
            <summary>
            写字符串到日志文件
            </summary>
            <param name="pagename">页面ID</param>
            <param name="userid">用户ID</param>
            <param name="logContext">内容</param>
        </member>
        <member name="M:Enterprise.Framework.Log.LogUtil.WriteLog(System.String,System.String,System.Exception)">
            <summary>
            写字符串到日志文件
            </summary>
            <param name="pid">页面ID</param>
            <param name="uid">用户ID</param>
            <param name="ex"></param>
        </member>
        <member name="T:Enterprise.Framework.Log.MessageType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Log.MessageType.Succeed">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Log.MessageType.Failure">
            <summary>
            操作失败或错误
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Log.MessageType.Warning">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Log.LogEntity">
            <summary>
            日志结构
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Log.LogEntity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Log.LogEntity._importCreated">
            <summary>
            是否是导入操作
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.PageCode">
            <summary>
            画面代码
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.Action">
            <summary>
            动作
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.Message">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.MessageType">
            <summary>
            消息类别
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.ImportCreated">
            <summary>
            是否是导入操作，默认为：不是导入操作
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Log.LogEntity.Operator">
            <summary>
            执行者
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Utils.ResourceProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.ResourceProcessor.GetString(System.String,System.String)">
            <summary>
            根据资源文件和属性，取得资源文件的属性
            </summary>
            <param name="file">资源文件</param>
            <param name="proname">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="T:Enterprise.Framework.Mail.SendMail">
            <summary>
                邮件管理器
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SendMail.SendSmtpEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>  
            发送邮件支持HTML格式 先引用System.Net.Mail;  
            </summary>  
            <param name="mailFrom">发送人Email 如demo@126.com</param>  
            <param name="mailServer">邮件服务器 如mail.126.com</param>  
            <param name="mailUserName">登陆用户名 如demo@126.com</param>  
            <param name="mailPassword">登陆密码 如123456</param>  
            <param name="mailto">收件人邮箱</param>  
            <param name="subject">邮件标题</param>  
            <param name="body">邮件正文</param>  
            <returns>成功 true; 失败 false</returns>  
        </member>
        <member name="M:Enterprise.Framework.Mail.SendMail.Send(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                发送Email,可以附加附件
            </summary>
            <param name="toAddress">收件人地址</param>
            <param name="toDisplayName">收件人名称</param>
            <param name="body">邮件內容</param>
            <param name="subject">邮件主题</param>
            <param name="fileName">附件路径</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="M:Enterprise.Framework.Mail.SendMail.SendActivationMail(System.String,System.String,System.String)">
            <summary>
                发送激活帐户Email,可以附加附件
            </summary>
            <param name="strTo">收件人地址</param>
            <param name="toDisplayName">收件人名称</param>
            <param name="uid">用户id</param>
            <returns>是否发送成功</returns>
        </member>
        <member name="T:Enterprise.Framework.Stamp.StampHelper">
            <summary>
               图章
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Stamp.StampHelper.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampHelper.IsReusable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Stamp.StampText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Stamp.StampText.ComputeStringLength(System.String,System.Drawing.Graphics,System.Single[],System.Single,Enterprise.Framework.Stamp.CharDirection)">
            <summary>
            Compute string total length and every char length
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Stamp.StampText.ComputeCharPos(System.Single[],System.Drawing.PointF[],System.Double[],System.Double)">
            <summary>
            Compute every char position
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Stamp.StampText.TextOnPathBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Generate seal bitmap
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Stamp.StampText.DrawRotatedText(System.Drawing.Graphics,System.String,System.Single,System.Drawing.PointF)">
            <summary>
             Draw every rotated character
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.CharDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.TextFont">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.Color">
            <summary>
            文字描边颜色
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.FillColor">
            <summary>
            圆形的填充颜色
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.LetterSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Stamp.StampText.ShowPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Stamp.CharDirection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Stamp.CharDirection.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Stamp.CharDirection.OutSide">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Stamp.CharDirection.ClockWise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Stamp.CharDirection.AntiClockWise">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Extension.ChineseSpell">
            <summary>
                汉字转换拼音
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Extension.ChineseSpell.MakeSpellCode(System.String,System.String,Enterprise.Framework.Extension.SpellOptions)">
            <summary>
                将中文转化为拼音
            </summary>
            <param name="strChinese">中文</param>
            <param name="splitChar"></param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.ChineseSpell.AppendString(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                字符串连接
            </summary>
            <param name="sb">原字符串</param>
            <param name="append">要添加的字符串</param>
            <param name="split">分隔符</param>
        </member>
        <member name="T:Enterprise.Framework.Extension.SpellOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Extension.SpellOptions.EnableUnicodeLetter">
            <summary>
               完整拼音
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Extension.SpellOptions.FirstLetterOnly">
            <summary>
              头字母
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Extension.SpellOptions.TranslateUnknowWordToInterrogation">
            <summary>
              不识别的字用?号代替
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.Cookie">
            <summary>
            Cookie操作类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.String)">
            <summary>
            创建COOKIE对象并赋Value值，修改COOKIE的Value值也用此方法，因为对COOKIE修改必须重新设Expires
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="strValue">COOKIE对象Value值</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.String)">
            <summary>
            创建COOKIE对象并赋Value值，修改COOKIE的Value值也用此方法，因为对COOKIE修改必须重新设Expires
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)，</param>
            <param name="strValue">COOKIE对象Value值</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.String,System.String)">
            <summary>
            创建COOKIE对象并赋Value值，修改COOKIE的Value值也用此方法，因为对COOKIE修改必须重新设Expires
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)，</param>
            <param name="strValue">COOKIE对象Value值</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            创建COOKIE对象并赋Value值，修改COOKIE的Value值也用此方法，因为对COOKIE修改必须重新设Expires
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)，</param>
            <param name="strValue">COOKIE对象Value值</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
            <param name="strPath">作用路径</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            创建COOKIE对象并赋多个KEY键值
            设键/值如下：
            NameValueCollection myCol = new NameValueCollection();
            myCol.Add("red", "rojo");
            myCol.Add("green", "verde");
            myCol.Add("blue", "azul");
            myCol.Add("red", "rouge");   结果“red:rojo,rouge；green:verde；blue:azul”
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)，</param>
            <param name="keyValue">键/值对集合</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            
            </summary>
            <param name="strCookieName"></param>
            <param name="iExpires"></param>
            <param name="keyValue"></param>
            <param name="strDomains"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SetObj(System.String,System.Int32,System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            创建COOKIE对象并赋多个KEY键值
            设键/值如下：
            NameValueCollection myCol = new NameValueCollection();
            myCol.Add("red", "rojo");
            myCol.Add("green", "verde");
            myCol.Add("blue", "azul");
            myCol.Add("red", "rouge");   结果“red:rojo,rouge；green:verde；blue:azul”
            </summary>
            <param name="strCookieName">COOKIE对象名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)，</param>
            <param name="keyValue">键/值对集合</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
            <param name="strPath">作用路径</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.GetValue(System.String)">
            <summary>
            读取Cookie某个对象的Value值，返回Value值，如果对象本就不存在，则返回字符串null
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <returns>Value值，如果对象本就不存在，则返回字符串null</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.GetValue(System.String,System.String)">
            <summary>
            读取Cookie某个对象的某个Key键的键值，返回Key键值，如果对象本就不存在，则返回字符串null，如果Key键不存在，则返回字符串"KeyNonexistence"
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strKeyName">Key键名</param>
            <returns>Key键值，如果对象本就不存在，则返回字符串null，如果Key键不存在，则返回字符串"KeyNonexistence"</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Edit(System.String,System.String,System.String,System.Int32)">
            <summary>
            修改某个COOKIE对象某个Key键的键值 或 给某个COOKIE对象添加Key键 都调用本方法，操作成功返回字符串"success"，如果对象本就不存在，则返回字符串null。
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strKeyName">Key键名</param>
            <param name="keyValue">Key键值</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)。注意：虽是修改功能，实则重建覆盖，所以时间也要重设，因为没办法获得旧的有效期</param>
            <returns>如果对象本就不存在，则返回字符串null，如果操作成功返回字符串"success"。</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Edit(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            修改某个COOKIE对象某个Key键的键值 或 给某个COOKIE对象添加Key键 都调用本方法，操作成功返回字符串"success"，如果对象本就不存在，则返回字符串null。
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strKeyName">Key键名</param>
            <param name="keyValue">Key键值</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)。注意：虽是修改功能，实则重建覆盖，所以时间也要重设，因为没办法获得旧的有效期</param>
            <param name="strPath">作用路径</param>
            <returns>如果对象本就不存在，则返回字符串null，如果操作成功返回字符串"success"。</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Edit(System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            修改某个COOKIE对象某个Key键的键值 或 给某个COOKIE对象添加Key键 都调用本方法，操作成功返回字符串"success"，如果对象本就不存在，则返回字符串null。
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strKeyName">Key键名</param>
            <param name="keyValue">Key键值</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)。注意：虽是修改功能，实则重建覆盖，所以时间也要重设，因为没办法获得旧的有效期</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
            <param name="strPath">作用路径</param>
            <returns>如果对象本就不存在，则返回字符串null，如果操作成功返回字符串"success"。</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Del(System.String)">
            <summary>
            删除COOKIE对象
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Del(System.String,System.String)">
            <summary>
            删除COOKIE对象
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.Del(System.String,System.String,System.String)">
            <summary>
            删除COOKIE对象
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strDomains">作用域,多个域名用;隔开</param>
            <param name="strPath">作用路径</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.DelKey(System.String,System.String,System.Int32)">
            <summary>
            删除某个COOKIE对象某个Key子键，操作成功返回字符串"success"，如果对象本就不存在，则返回字符串null
            </summary>
            <param name="strCookieName">Cookie对象名称</param>
            <param name="strKeyName">Key键名</param>
            <param name="iExpires">COOKIE对象有效时间（秒数），1表示永久有效，0和负数都表示不设有效时间，大于等于2表示具体有效秒数，31536000秒=1年=(60*60*24*365)。注意：虽是修改功能，实则重建覆盖，所以时间也要重设，因为没办法获得旧的有效期</param>
            <returns>如果对象本就不存在，则返回字符串null，如果操作成功返回字符串"success"。</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Cookie.SelectDomain(System.String)">
            <summary>
            定位到正确的域
            </summary>
            <param name="strDomains"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.CvsHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.CvsHelper.Dt2Csv(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出报表文件为csv格式
            </summary>
            <param name="dt">DataTable</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题，如：用户ID,用户名称,用户密码</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.CvsHelper.Csv2Dt(System.String,System.Int32,System.Data.DataTable)">
            <summary>
            将CSV读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始</param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Utils.EncryptUtil">
            <summary>
                DES加密/解密类。
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.EncryptUtil.Encrypt(System.String)">
            <summary>
                加密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.EncryptUtil.Encrypt(System.String,System.String)">
            <summary>
                加密数据
            </summary>
            <param name="text"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.EncryptUtil.Decrypt(System.String)">
            <summary>
                解密
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.EncryptUtil.Decrypt(System.String,System.String)">
            <summary>
                解密数据
            </summary>
            <param name="text"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.DirFile">
            <summary>
            目录及文件操作
            编码为utf-8
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">此地路径相对站点而言</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.XCreateDir(System.String)">
            <summary>
            
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.CreateFolder(System.String)">
            <summary>
            创建目录路径
            </summary>
            <param name="folderPath">物理路径</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.DeleteDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dir">此地路径相对站点而言</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="file">格式:a/b.htm,相对根目录</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.XFileExists(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.ReadFile(System.String)">
            <summary>
            读取文件内容
            </summary>
            <param name="file">格式:a/b.htm,相对根目录</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.SaveFile(System.String,System.String)">
            <summary>
            保存为不带Bom的文件
            </summary>
            <param name="txtStr"></param>
            <param name="tempDir">格式:a/b.htm,相对根目录</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.SaveFile(System.String,System.String,System.Boolean)">
            <summary>
            保存文件内容,自动创建目录
            </summary>
            <param name="txtStr"></param>
            <param name="tempDir">格式:a/b.htm,相对根目录</param>
            <param name="noBom"></param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件
            这个方法在6.0版本后改写，虽看似比前面的版本冗长，但避免了file2文件一直被占用的问题
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <param name="overwrite">如果已经存在是否覆盖？</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">此地路径相对程序路径而言</param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.GetFolderPath(System.String)">
            <summary>
            获得文件的目录路径
            </summary>
            <param name="filePath">文件路径</param>
            <returns>以\结尾</returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.GetFolderPath(System.Boolean,System.String)">
            <summary>
            获得文件的目录路径
            </summary>
            <param name="isUrl">是否是网址</param>
            <param name="filePath">文件路径</param>
            <returns>以\或/结尾</returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.GetFileName(System.String)">
            <summary>
            获得文件的名称
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.GetFileName(System.Boolean,System.String)">
            <summary>
            获得文件的名称
            </summary>
            <param name="isUrl">是否是网址</param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.GetFileExt(System.String)">
            <summary>
            获得文件的后缀
            不带点，小写
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.CopyDir(System.String,System.String)">
            <summary>
            目录拷贝
            </summary>
            <param name="oldDir"></param>
            <param name="newDir"></param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.DelDir(System.String)">
            <summary>
            目录删除
            </summary>
            <param name="oldDir"></param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.CopyAndDelDir(System.String,System.String)">
            <summary>
            目录剪切
            </summary>
            <param name="oldDirectory"></param>
            <param name="newDirectory"></param>
        </member>
        <member name="M:Enterprise.Framework.File.DirFile.DownloadFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.Int64)">
            <summary>
            文件下载
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="fullPath">源文件路径</param>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Extension.DataTableHelper">
            <summary>
             DataTableHelper
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Extension.DataTableHelper.Dt2Json(System.Data.DataTable)">
            <summary>
            将dt转化成Json数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.DataTableHelper.Dt2Json(System.Data.DataTable,System.Int32)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="fromCount"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.DataTableHelper.Dt2Json(System.Data.DataTable,System.Int32,System.String,System.String)">
            <summary>
            将dt转化成Json数据
            </summary>
            <param name="dt"></param>
            <param name="fromCount"></param>
            <param name="totalCountStr"></param>
            <param name="tbname"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.DataTableHelper.Dt2Json(System.Data.DataTable,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            将dt转化成Json数据
            </summary>
            <param name="dt"></param>
            <param name="fromCount"></param>
            <param name="totalCountStr"></param>
            <param name="tbname"></param>
            <param name="formatData"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.DataTableHelper.Dt2List``1(System.Data.DataTable)">
            <summary>
            将DataTable转换为list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.ExcelHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.ExcelHelper.GetExcelTables(System.String)">
            <summary>
            获取Excel数据表列表
            </summary>
            <param name="excelFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ExcelHelper.GetExcelTableColumns(System.String,System.String)">
            <summary>
            获取指定Excel文件数据表的数据列列表
            </summary>
            <param name="excelFileName">Excel文件名</param>
            <param name="tableName">数据表名</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ExcelHelper.OutputToExcel(System.Data.DataTable,System.String)">
            <summary>
            将数据导出至Excel
            </summary>
            <param name="Table">DataTable对象</param>
            <param name="ExcelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ExcelHelper.OutputToExcel(System.Data.DataTable,System.Collections.ArrayList,System.String)">
            <summary>
            将数据导出至Excel
            </summary>
            <param name="Table">DataTable对象</param>
            <param name="Columns">要导出的数据列集合</param>
            <param name="ExcelFilePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ExcelHelper.InputFromExcel(System.String,System.String)">
            <summary>
            导入Excel数据表至DataTable（第一行作为表头）
            </summary>
            <param name="excelFilePath">Excel文件路径</param>
            <param name="tableName">数据表名，如果数据表名错误，默认为第一个数据表名</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.DataBase.ExecuteSqlBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.DataBase.ExecuteSqlBlock.Go(System.String,System.String,System.String)">
            <summary>
            执行Sql脚本块
            </summary>
            <param name="dbType">0为access,1为sqlserver</param>
            <param name="connectionString">数据库连接</param>
            <param name="pathToScriptFile">脚本路径，物理路径</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.VideoToSwfHelper">
            <summary>
            ffmpeg.exe调用
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.VideoToSwfHelper.Convert2Flv(System.String,System.String,System.String)">
            <summary>
            视频格式转为Flv
            </summary>
            <param name="vFileName">原视频文件地址</param>
            <param name="widthAndHeight">宽和高参数，如：480*360</param>
            <param name="exportName">生成后的FLV文件地址</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.VideoToSwfHelper.CatchImg(System.String,System.String,System.String)">
            <summary>
            生成FLV视频的缩略图
            </summary>
            <param name="vFileName">视频文件地址</param>
            <param name="FlvImgSize">宽和高参数，如：240*180</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.FileExtension">
            <summary>
            文件编号
            </summary>
        </member>
        <member name="F:Enterprise.Framework.File.FileExtension.JPG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.File.FileExtension.GIF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.File.FileExtension.BMP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.File.FileExtension.PNG">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.File.FileValidation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.FileValidation.IsAllowedExtension(System.Web.HttpPostedFile,Enterprise.Framework.File.FileExtension[])">
            <summary>
            是否允许
            </summary>
            <param name="oFile"></param>
            <param name="fileEx"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.FileValidation.IsSecureUploadPhoto(System.Web.HttpPostedFile)">
            <summary>
            上传前的图片是否可靠
            </summary>
            <param name="oFile"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.FileValidation.IsSecureUpfilePhoto(System.String)">
            <summary>
            上传后的图片是否安全
            </summary>
            <param name="photoFile">物理地址</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Web.HttpHelper">
            <summary>
            抓取远程页面内容
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.HttpHelper.Get_Http(System.String)">
            <summary>
            
            </summary>
            <param name="tUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.HttpHelper.Post_Http(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="encodeType"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.ImageHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.ImgFormat(System.String)">
            <summary>
            获得图片的类型
            </summary>
            <param name="photo"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.LocalImage2Thumbs(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式
            <code>HW:指定高宽缩放（可能变形）</code>
            <code>W:指定宽，高按比例  </code>
            <code>H:指定高，宽按比例</code>
            <code>CUT:指定高宽裁减（不变形） </code>
            <code>FILL:填充</code>
            </param>    
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.RemoteImage2Thumbs(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成远程图片的缩略图
            </summary>
            <param name="remoteImageUrl"></param>
            <param name="thumbnailPath"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.Image2Thumbs(System.Drawing.Image,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImage">源图</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="photoWidth">最终缩略图宽度</param>
            <param name="height">最终缩略图高度</param>
            <param name="mode">生成缩略图的方式
            <code>HW:指定高宽缩放（可能变形）</code>
            <code>W:指定宽，高按比例  </code>
            <code>H:指定高，宽按比例</code>
            <code>CUT:指定高宽裁减（不变形） </code>
            <code>FILL:填充</code>
            </param> 
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.MakeMyThumbs(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            切割后生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="toW">缩略图最终宽度</param>
            <param name="toH">缩略图最终高度</param>
            <param name="X">X坐标（zoom为1时）</param>
            <param name="Y">Y坐标（zoom为1时）</param>
            <param name="W">选择区域宽（zoom为1时）</param>
            <param name="H">选择区域高（zoom为1时）</param>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.CreateImage(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成图片
            </summary>
            <param name="p_SourcePath">源图路径（物理路径）</param>
            <param name="p_TargetPath">缩略图路径（物理路径）</param>
            <param name="p_Width">缩略图宽度</param>
            <param name="p_Height">缩略图高度</param>
            <param name="p_Mode">生成缩略图的方式</param>   
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.AddWater(System.String,System.String,System.String)">
            <summary>
            在图片上增加文字水印
            </summary>
            <param name="path">原服务器图片路径</param>
            <param name="pathSy">生成的带文字水印的图片路径</param>
            <param name="addText">水印文字</param>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.AddImageSignPic(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            加图片水印
            </summary>
            <param name="filename">文件名</param>
            <param name="watermarkFilename">水印文件名</param>
            <param name="watermarkStatus">图片水印位置:0=不使用 1=左上 2=中上 3=右上 4=左中 ... 9=右下</param>
            <param name="quality">是否是高质量图片 取值范围0--100</param> 
            <param name="watermarkTransparency">图片水印透明度 取值范围1--10 (10为不透明)</param>
        </member>
        <member name="M:Enterprise.Framework.File.ImageHelper.AddWaterPic(System.String,System.String,System.String)">
            <summary>
            在图片上生成图片水印
            </summary>
            <param name="Path">原服务器图片路径</param>
            <param name="Path_syp">生成的带图片水印的图片路径</param>
            <param name="Path_sypf">水印图片路径</param>
        </member>
        <member name="T:Enterprise.Framework.Web.IpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.IpHelper.Ip2Long(System.Net.IPAddress)">
            <summary>
            将IP地址转为整数形式
            </summary>
            <returns>整数</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.IpHelper.Long2Ip(System.Int64)">
            <summary>
            将整数转为IP地址
            </summary>
            <returns>IP地址</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.IpHelper.GetClientIp">
            <summary>
            得到客户端ip
            </summary>
            <returns>ip</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.IpHelper.GetRemotemac(System.String)">
            <summary>
             利用客户端ip得到客户端mac
            </summary>
            <param name="remoteip">客户端ip</param>
            <returns>int16类型的mac</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.IpHelper.GetClientMac">
            <summary>
             int64类型的mac转换成正确的客户端mac
            </summary>
            <returns>mac</returns>
        </member>
        <member name="P:Enterprise.Framework.Web.IpHelper.ClientIp">
            <summary>
            获得客户端IP
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Utils.Location">
            <summary>
            城市信息
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.Location.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Enterprise.Framework.Utils.Location.AreaType">
            <summary>
            地区属性
            0代表一般省市,1代表直辖市,2代表自治区,3代表港澳台,4表示其他
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Utils.Location.Captical">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Utils.Location.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Utils.SearchIndex">
            <summary>
            判断IP归属地类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.GetIPLocation(System.String)">
            <summary>
            返回IP查找结果
            </summary>
            <param name="ipValue">要查找的IP地址</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Utils.SearchIndex.CzIndexInfo">
            <summary>
            辅助类，用于保存IP索引信息
            </summary>
                
        </member>
        <member name="F:Enterprise.Framework.Utils.SearchIndex.CzIndexInfo.IpSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Utils.SearchIndex.CzIndexInfo.IpEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Utils.SearchIndex.CzIndexInfo.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.CzIndexInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Utils.SearchIndex.Phczip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dbFilePath"></param>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.SetDbFilePath(System.String)">
            <summary>
            
            </summary>
            <param name="dbFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.GetAddressWithIp(System.String)">
            <summary>
            
            </summary>
            <param name="ipValue"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.ReadAddressInfoAtOffset(System.UInt32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.ReadArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.ReadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.GetTag">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.IndexInfoAtPos(System.UInt32)">
            <summary>
            
            </summary>
            <param name="indexPos"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.IptoUInt32(System.String)">
            <summary>
            从IP转换为Int32
            </summary>
            <param name="ipValue"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.IsNumeric(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">待判断字符串</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Utils.SearchIndex.Phczip.GetUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.JpfileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.JpfileHelper.FileCrypt(System.String,System.String,System.String)">
            <summary>
            文件加解密
            </summary>
            <param name="oFileName">原文件地址</param>
            <param name="encodeOrDecode">加密或解密参数，如：-d、-f</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.JpfileHelper.FileCrypt(System.String,System.String)">
            <summary>
            加解密密码。默认密码是12345678
            </summary>
            <param name="oFileName"></param>
            <param name="encodeOrDecode"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.JpfileHelper.FileCrypt(System.String)">
            <summary>
            加密文件。默认密码是12345678
            </summary>
            <param name="oFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Mail.MailAttachments.Add(System.String[])">
            <summary>
            添加邮件附件
            </summary>
            <param name="FilePath">附件的绝对路径</param>
        </member>
        <member name="M:Enterprise.Framework.Mail.MailAttachments.Add(System.String)">
            <summary>
            添加一个附件,当指定的附件不存在时，忽略该附件，不产生异常。
            </summary>
            <param name="filePath">附件的绝对路径</param>
        </member>
        <member name="T:Enterprise.Framework.Mail.MailMessage">
            <summary>
            MailMessage 表示SMTP要发送的一封邮件的消息。
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.MailMessage.AddRecipients(System.String)">
            <summary>
            增加一个收件人地址
            </summary>
            <param name="recipient">收件人的Email地址</param>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Charset">
            <summary>
            设定语言代码，默认设定为GB2312，如不需要可设置为""
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.MaxRecipientNum">
            <summary>
            最大收件人
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.FromName">
            <summary>
            发件人姓名
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Subject">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Attachments">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Priority">
            <summary>
            优先权
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.Recipients">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.MailMessage.BodyFormat">
            <summary>
            邮件格式
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.errmsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.tcpClient">
            <summary>
            TcpClient对象，用于连接服务器
            </summary> 
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.networkStream">
            <summary>
            NetworkStream对象
            </summary> 
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.logs">
            <summary>
            服务器交互记录
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.ErrCodeHT">
            <summary>
            SMTP错误代码哈希表
            </summary>
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpServerHelper.RightCodeHT">
            <summary>
            SMTP正确代码哈希表
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.Base64Encode(System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
            <param name="str">要编码的字符串</param>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.Base64Decode(System.String)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
            <param name="str">要解码的字符串</param>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.GetStream(System.String)">
            <summary>
            得到上传附件的文件流
            </summary>
            <param name="FilePath">附件的绝对路径</param>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.SMTPCodeAdd">
            <summary>
            SMTP回应代码哈希表
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.SendCommand(System.String)">
            <summary>
            发送SMTP命令
            </summary> 
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.RecvResponse">
            <summary>
            接收SMTP服务器回应
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.Dialog(System.String,System.String)">
            <summary>
            与服务器交互，发送一条命令并接收回应。
            </summary>
            <param name="str">一个要发送的命令</param>
            <param name="errstr">如果错误，要反馈的信息</param>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.Dialog(System.String[],System.String)">
            <summary>
            与服务器交互，发送一组命令并接收回应。
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.SendEmail(System.String,System.Int32,Enterprise.Framework.Mail.MailMessage)">
            <summary>
            发送电子邮件，SMTP服务器不需要身份验证
            </summary>
            <param name="smtpServer">发信SMTP服务器</param>
            <param name="port">端口，默认为25</param>
            <param name="mailMessage">邮件内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpServerHelper.SendEmail(System.String,System.Int32,System.String,System.String,Enterprise.Framework.Mail.MailMessage)">
            <summary>
            发送电子邮件，SMTP服务器需要身份验证
            </summary>
            <param name="smtpServer">发信SMTP服务器</param>
            <param name="port">端口，默认为25</param>
            <param name="username">发信人邮箱地址</param>
            <param name="password">发信人邮箱密码</param>
            <param name="mailMessage">邮件内容</param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.Mail.SmtpServerHelper.ErrMsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Mail.SmtpClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="smtpServer"></param>
            <param name="smtpPort"></param>
        </member>
        <member name="F:Enterprise.Framework.Mail.SmtpClient._errmsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Mail.SmtpClient.Send(Enterprise.Framework.Mail.MailMessage,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="mailMessage"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="P:Enterprise.Framework.Mail.SmtpClient.ErrMsg">
            <summary>
            错误消息反馈
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.SmtpClient.SmtpServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Mail.SmtpClient.SmtpPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.Pager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.Pager.RenderPager(System.Int32,System.Int32,System.String)">
            <summary>
            </summary>
            <param name="pageCount">总页数</param>
            <param name="pageIndex">当前页码</param>
            <param name="url">链接</param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Web.QueryString">
            <summary>
            QueryString 地址栏参数
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.Q(System.String)">
            <summary>
            等于Request.QueryString;如果为null 返回 空“” ，否则返回Request.QueryString[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.F(System.String)">
            <summary>
            等于  Request.Form  如果为null 返回 空“” ，否则返回 Request.Form[name]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.QId(System.String)">
            <summary>
            获取url中的id
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回-1
            </summary>
            <param name="value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.QueryString.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="express">正则表达式的内容。</param>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="P:Enterprise.Framework.Web.QueryString.Current">
            <summary>
            HttpContext Current
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Web.QueryString.Request">
            <summary>
            HttpContext Current  HttpRequest Request   get { return Current.Request;
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Web.QueryString.Response">
            <summary>
             HttpContext Current  HttpRequest Request   get { return Current.Request; HttpResponse Response  return Current.Response;
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.Session">
            <summary>
            Session操作类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.AddTable(System.String,System.Data.DataTable)">
            <summary>
                
            </summary>
            <param name="key"></param>
            <param name="table"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.GetTable(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Add(System.String,System.String)">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="key">Session对象名称</param>
            <param name="value">Session值</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Adds(System.String,System.String[])">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="key">Session对象名称</param>
            <param name="values">Session值数组</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Add(System.String,System.String,System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="key">Session对象名称</param>
            <param name="value">Session值</param>
            <param name="expires">调动有效期（分钟）</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Adds(System.String,System.String[],System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="key">Session对象名称</param>
            <param name="values">Session值数组</param>
            <param name="expires">调动有效期（分钟）</param>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Get(System.String)">
            <summary>
            读取某个Session对象值
            </summary>
            <param name="key">Session对象名称</param>
            <returns>Session对象值</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Gets(System.String)">
            <summary>
            读取某个Session对象值数组
            </summary>
            <param name="key">Session对象名称</param>
            <returns>Session对象值数组</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.Session.Delete(System.String)">
            <summary>
            删除某个Session对象
            </summary>
            <param name="key">Session对象名称</param>
        </member>
        <member name="T:Enterprise.Framework.Extension.StringUtility">
            <summary>
            一些常用的字符串函数
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.EncryptStr(System.String)">
            <summary>
            倒序加1加密
            </summary>
            <param name="rs"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.DecryptStr(System.String)">
            <summary>
            顺序减1解码 
            </summary>
            <param name="rs"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.Escape(System.String)">
            <summary>
            Escape加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.UnEscape(System.String)">
            <summary>
            UnEscape解密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.Left(System.String,System.Int32)">
            <summary>
            左截取
            </summary>
            <param name="inputString"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.Right(System.String,System.Int32)">
            <summary>
            右截取
            </summary>
            <param name="inputString"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.CutChar(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sText"></param>
            <param name="sChar"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.CutString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串,汉字为2个字符
            </summary>
            <param name="inputString"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.RemoveSpaceStr(System.String)">
            <summary>
            去掉多余空格
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToSummary(System.String)">
            <summary>
            
            </summary>
            <param name="htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.NoHTML(System.String)">
            <summary>   
            去除HTML标记   
            </summary>
            <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ReplaceEx(System.String,System.String,System.String)">
            <summary>
            不区分大小写的替换
            </summary>
            <param name="original">原字符串</param>
            <param name="pattern">需替换字符</param>
            <param name="replacement">被替换内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.HtmlEncode(System.String)">
            <summary>
            替换html中的特殊字符
            </summary>
            <param name="theString">需要进行替换的文本。</param>
            <returns>替换完的文本。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.HtmlDecode(System.String)">
            <summary>
            恢复html中的特殊字符
            </summary>
            <param name="theString">需要恢复的文本。</param>
            <returns>恢复好的文本。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToMoney(System.Double)">
            <summary>
            转为货币格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToMoney(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToMoney(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.ToDBC(System.String)">
            <summary>
            转半角的函数(DBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.SimpleLineSummary(System.String)">
            <summary>
            输出单行简介
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.UBB2HTML(System.String)">
            <summary> 
            UBB代码处理函数 
            </summary> 
            <param name="content">输入字符串</param> 
            <returns>输出字符串</returns> 
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.Html2Js(System.String)">
            <summary>
            将html转成js代码,不完全和原始数据一致
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.Html2JsStr(System.String)">
            <summary>
            将html转成可输出的js字符串,不完全和原始数据一致
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.FilterSymbol(System.String)">
            <summary>
            过滤所有特殊特号
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.DelSymbol(System.String)">
            <summary>
            过滤所有特殊特号，只允许逗号、分号和小数点
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.SafetyTitle(System.String)">
            <summary>
            过滤一般特殊特号,主要用于过滤标题
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Enterprise.Framework.Extension.StringUtility.SafetyQueryS(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Enterprise.Framework.Extension.StringUtility.SafetyLikeValue(System.String)">
            <summary>
            得到安全的sql关键词
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetRegValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            正则表达式取值
            </summary>
            <param name="htmlCode">HTML代码</param>
            <param name="regexString">正则表达式</param>
            <param name="groupKey">正则表达式分组关键字</param>
            <param name="rightToLeft">是否从右到左</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.AttributeValue(System.String,System.String)">
            <summary>
            获得标签的属性值
            </summary>
            <param name="htmlTag"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.DateStringFromNow(System.DateTime)">
            <summary>        
            格式化显示时间为几个月,几天前,几小时前,几分钟前,或几秒前        
            </summary>        
            <param name="dt">要格式化显示的时间</param>        
            <returns>几个月,几天前,几小时前,几分钟前,或几秒前</returns>        
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetHtmls(System.String,System.String,System.String)">
            <summary>
            <para>获取截取内容数组:不包含头尾</para> 
            <para>    sHtml(原文内容)</para> 
            <para>    strStart(开头内容)</para> 
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetHtmls(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>获取截取内容数组:自定义头尾</para> 
            <para>    sHtml(原文内容)</para> 
            <para>    strStart(开头内容)</para> 
            <para>    strEnd(结束内容)</para> 
            <para>    getStart(是否包含头内容)</para> 
            <para>    getEnd(是否包含尾内容)</para> 
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <param name="getStart">是否包含头内容</param>
            <param name="getEnd">是否包含尾内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetHtml(System.String,System.String,System.String)">
            <summary>
            <para>获取截取内容字符串:不包含头尾</para> 
            <para>    sHtml(原文内容)</para> 
            <para>    strStart(开头内容)</para> 
            <para>    strEnd(结束内容)</para> 
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetHtml(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>获取截取内容字符串:自定义头尾</para> 
            <para>    sHtml(原文内容)</para> 
            <para>    strStart(开头内容)</para> 
            <para>    strEnd(结束内容)</para> 
            <para>    getStart(是否包含头内容)</para> 
            <para>    getEnd(是否包含尾内容)</para> 
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <param name="getStart">是否包含头内容</param>
            <param name="getEnd">是否包含尾内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.EnReplaceStr(System.String)">
            <summary>
            先将一些特殊东西替换
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.DeReplaceStr(System.String)">
            <summary>
            最后还原那些特殊的东西
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetArray(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取截取内容数组:自定义头尾
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <param name="getStart">是否包含头内容</param>
            <param name="getEnd">是否包含尾内容</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetResult(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取截取内容:自定义头尾
            </summary>
            <param name="sHtml">原文内容</param>
            <param name="strStart">开头内容</param>
            <param name="strEnd">结束内容</param>
            <param name="getStart">是否包含头内容</param>
            <param name="getEnd">是否包含尾内容</param>
            <returns></returns>
        </member>
        <member name="F:Enterprise.Framework.Extension.StringUtility.AryChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.RegexStr(System.String,System.String)">
            <summary>
            根据头尾字符串获得正则规则
            </summary>
            <param name="strStart"></param>
            <param name="strEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.StringUtility.GetKeyCode(System.String,System.Int32,Enterprise.Framework.Enum.YesNo)">
            <summary>
                生成主键
            </summary>
            <param name="keyCode"></param>
            <param name="keyCodeLength"></param>
            <param name="cate"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.SwftoolsHelp">
            <summary>
            pdf2swf-0.9.1.exe调用
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.SwftoolsHelp.PDF2SWF(System.String,System.String)">
            <summary>
            转换所有的页，图片质量80%
            </summary>
            <param name="pdfPath"></param>
            <param name="swfPath"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.SwftoolsHelp.PDF2SWF(System.String,System.String,System.Int32)">
            <summary>
            转换前N页，图片质量80%
            </summary>
            <param name="pdfPath"></param>
            <param name="swfPath"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.SwftoolsHelp.PDF2SWF(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            PDF格式转为SWF
            </summary>
            <param name="pdfPath">原视频文件地址，如/a/b/c.pdf</param>
            <param name="swfPath">生成后的FLV文件地址，如/a/b/c.swf</param>
            <param name="beginpage">转换开始页</param>
            <param name="endpage">转换结束页</param>
            <param name="photoQuality"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Web.UrlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url.
            </summary>
            <remarks>
            Use this method for getting relative site urls for resource files such as
            1. Javascript
            2. Images
            3. Xml files
            </remarks>
            <param name="url">"~/Scripts/Javascript/UI.js"</param>
            <returns>
            For IIS PRODUCTION: /Scripts/Javascript/UI.js
            For VS  LOCAL DEV : /MyApp.WebSite/Scripts/Javascript/UI.js
            </returns>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String)">
            <summary>
            Gets the relative site url for possibly mapped/rewritten urls.
            </summary>
            <remarks>
            Use this method for getting relative site urls for rewritten urls such as
            1. Web pages ( .aspx .html .htm etc. )
            </remarks>
            <param name="url">"~/Modules/Home.aspx"</param>
            <returns>
            If there are mappings:
            For IIS PRODUCTION: /Home.aspx
            For VS  LOCAL DEV : /Workshops.WebSite/Home.aspx
            </returns>        
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.ConfigureUrlRewriting(System.Boolean,Enterprise.Framework.Web.UrlMapper)">
            <summary>
            Configure the url-rewriting flag and set the url mapper.
            </summary>
            <param name="isUrlRewritingEnabled">True if URL rewriting is enabled.</param>
            <param name="urlMapper">Instance of URL mapper.</param>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetSiteRoot">
            <summary>
            Gets the root of the website. http: or https: plus the appropriate port.
            </summary>
            <returns>Root of the website.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetRequestedFileName(System.String,System.Boolean)">
            <summary>
            Returns the name of the requested file.
            </summary>
            <param name="rawUrl">Raw URL.</param>
            <param name="includeExtension">Flag indicating if extension of the file should also be 
            included.</param>
            <returns>Requested file name.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in CommonLibrary.Tests.
            </summary>
            <param name="applicationPath">Application path.</param>
            <param name="url">Request URL.</param>
            <returns>Relative site URL.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlHelper.GetMappedRelativeSiteUrl(System.String,System.String)">
            <summary>
            These are exposed to the unit tests in ServiceGoFor.CommonLibrary.Tests.
            </summary>
            <param name="applicationPath">Application path.</param>
            <param name="url">Request URL.</param>
            <returns>Mapped relative site URL.</returns>
        </member>
        <member name="P:Enterprise.Framework.Web.UrlHelper.GetUrlPrefix">
            <summary>
            当前地址前缀
            </summary>
        </member>
        <member name="P:Enterprise.Framework.Web.UrlHelper.IsRewritingEnabled">
            <summary>
            Get or set flag indicating if url-rewriting is enabled.
            </summary>        
        </member>
        <member name="P:Enterprise.Framework.Web.UrlHelper.UrlMapperProvider">
            <summary>
            Instance of the url mapper.
            </summary>
        </member>
        <member name="T:Enterprise.Framework.Web.UrlMapper">
            <summary>
            Url mapper to assist in mapping physical urls to possible rewritten urls.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlMapper.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Url mapper with mappings provided as IDictionary.
            </summary>
            <example>
                      Physical Url        Rewritten url
                key = "~/Classes.aspx"    value = "~/SearchClasses.aspx"
            </example>
            <param name="urlMappings">Mappings from physical url to logical urls.</param>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlMapper.GetUrl(System.String)">
            <summary>
            Get the real url.
            </summary>
            <param name="url">URL.</param>
            <returns>Mapped url if mapping present, original url otherwise</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.UrlMapper.Init(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize.
            </summary>
            <param name="urlMappings">mappings to rewritten urls.</param>
        </member>
        <member name="T:Enterprise.Framework.Extension.Validator">
            <summary>
            提供经常需要使用的一些验证逻辑。
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsCommonDomain(System.String)">
            <summary>
            普通的域名
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsStringDate(System.String)">
            <summary>
            检查一个字符串是否可以转化为日期，一般用于验证用户输入日期的合法性。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否可以转化为日期的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsNumeric(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsLetterOrNumber(System.String)">
            <summary>
            检查一个字符串是否是纯字母和数字构成的，一般用于查询字符串参数的有效性验证。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsNumber(System.String)">
            <summary>
            判断是否是数字，包括小数和整数。
            </summary>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="express">正则表达式的内容。</param>
            <param name="value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsEmail(System.String)">
            <summary>
            判断一个字符串是否为邮件
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsZIPCode(System.String)">
            <summary>
            判断一个字符串是否为邮编
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsIDCard(System.String)">
            <summary>
            判断一个字符串是否为ID格式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsInt(System.String)">
            <summary>
            判断一个字符串是否为Int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsChinese(System.String)">
            <summary>
            判断是不是纯中文
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsMobileNum(System.String)">
            <summary>
            判断一个字符串是否为手机号码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsPhoneNum(System.String)">
            <summary>
            判断一个字符串是否为电话号码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsUrl(System.String)">
            <summary>
            判断一个字符串是否为网址
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsIp(System.String)">
            <summary>
            判断一个字符串是否为IP地址
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsWordAndNum(System.String)">
            <summary>
            判断一个字符串是否为字母加数字
            Regex("[a-zA-Z0-9]?"
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.StrToDate(System.String,System.DateTime)">
            <summary>
            把字符串转成日期
            </summary>
            <param name="value">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.CompareDate(System.String,System.String,System.Int32)">
            <summary>
            日期比较
            </summary>
            <param name="today">距离某个日期</param>
            <param name="writeDate">输入日期</param>
            <param name="n">比较天数</param>
            <returns>大于天数返回true，小于返回false</returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.ValidDate(System.String)">
            <summary>
            判断日期是否过期
            </summary>
            <param name="myDate">所要判断的日期</param>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.StrToInt(System.String,System.Int32)">
            <summary>
            把字符串转成整型
            </summary>
            <param name="value">字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.IsFreeSite(System.String,System.String)">
            <summary>
            是否免费授权网站
            </summary>
            <param name="defaultpage">首页地址</param>
            <param name="webname">网站名称</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Extension.Validator.GetHttpPage(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.File.XmlReadConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.XmlReadConfig.ReadXml(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlReadConfig.ReadConfig(System.String,System.String)">
            <summary>
            读取Config参数
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.XmlReadConfig.UpdateConfig(System.String,System.String,System.String)">
            <summary>
            保存Config参数
            </summary>
        </member>
        <member name="T:Enterprise.Framework.File.XmlHelper">
            <summary>
            Xml操作帮助类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.CreateXmlDocument(System.String,System.String,System.String)">
            <summary>
            创建XML文件
            </summary>
            <param name="fileName">创建文件的完全限定名(包含路径)</param>
            <param name="rootNodeName">根节点名称</param>
            <param name="encoding">xml文档编码 (默认:utf-8)</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.CreateXmlDocument(System.String,System.String)">
            <summary>
            创建XML文件
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="rootNodeName">根节点名称</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.CreateXmlNode(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建一个子节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询父节点的XPath路径</param>
            <param name="xmlNodeName">创建的节点名称</param>
            <param name="innerXml">创建的节点内xml文字</param>
            <param name="attributes">需要创建的属性字典(为NULL,则不创建属性)</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.CreateOrUpdateXmlNode(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建或修改一个子节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询父节点的XPath路径</param>
            <param name="xmlNodeName">创建的节点名称</param>
            <param name="innerXml">创建的节点内xml文字</param>
            <param name="attributes">需要创建的属性字典(为NULL,则不创建属性)</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.CreateOrUpdateAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            创建或修改一个属性
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询该属性节点的XPath路径</param>
            <param name="name">创建或修改的属性名称</param>
            <param name="value">创建或修改的属性值</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.DeleteXmlNode(System.String,System.String)">
            <summary>
            删除一个节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询该节点的XPath路径</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.BatchDeleteXmlNode(System.String,System.String)">
            <summary>
            批量删除节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询节点集合的XPath路径</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.DeleteAttribute(System.String,System.String,System.String)">
            <summary>
            删除属性
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询该属性节点的XPath路径</param>
            <param name="name">属性名称</param>
            <param name="attributeName"></param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.GetXmlNode(System.String,System.String)">
            <summary>
            获取一个节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询该节点的XPath路径</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.GetXmlNodeByAttribute(System.String,System.String,System.String,System.String)">
            <summary>
             在节点项里面查找--根据节点的属性名称和属性值得到第一个符合的节点
            </summary>
            <param name="fileName"></param>
            <param name="xpath"></param>
            <param name="attrText"></param>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.GetTreeXmlNodeByAttribute(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
            在节点树里面查找--根据节点的属性名称和属性值得到第一个符合的节点
            </summary>
            <param name="list"></param>
            <param name="attrText"></param>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.GetXmlNodeList(System.String,System.String)">
            <summary>
            获取多个节点
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询多个节点的XPath路径</param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="M:Enterprise.Framework.File.XmlHelper.GetXmlAttribute(System.String,System.String,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="fileName">XML文件的完全限定路径(包含路径)</param>
            <param name="xPath">查询该属性节点的XPath路径</param>
            <param name="name"></param>
            <returns>成功返回True,失败返回Fasle</returns>
        </member>
        <member name="T:Enterprise.Framework.Web.JScript">
            <summary>
            弹出框应用类
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.AlertAndRedirect(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="toURL"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JscriptSender(System.Web.UI.Page)">
            <summary>
            向客户端发送函数KendoPostBack(eventTarget, eventArgument)
            服务器端可接收__EVENTTARGET,__EVENTARGUMENT的值
            </summary>
            <param name="page">System.Web.UI.Page 一般为this</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.Alert(System.String)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="js">窗口信息</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.Alert(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.RtnRltMsgbox(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="strWinCtrl"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.RefreshParent">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JSStringFormat(System.String)">
            <summary>
            格式化为JS可解释的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.OpenWebForm(System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.OpenWebForm(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="future"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.OpenWebForm(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="formName"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.OpenWebForm(System.String,System.Boolean)">
            <summary>		
            函数名:OpenWebForm	
            功能描述:打开WEB窗口	
            </summary>
            <param name="url">WEB窗口</param>
            <param name="isFullScreen">是否全屏幕</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JavaScriptFrameHref(System.String,System.String)">
            <summary>
            指定的框架页面转换
            </summary>
            <param name="FrameName"></param>
            <param name="url"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JavaScriptResetPage(System.String)">
             <summary>
            重置页面
             </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.JavaScriptSetCookie(System.String,System.String)">
            <summary>
            函数名:JavaScriptSetCookie
            功能描述:客户端方法设置Cookie
            </summary>
            <param name="strName">Cookie名</param>
            <param name="strValue">Cookie值</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.GotoParentWindow(System.String)">
            <summary>		
            函数名:GotoParentWindow	
            功能描述:返回父窗口	
            </summary>
            <param name="parentWindowUrl">父窗口</param>		
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ReplaceParentWindow(System.String,System.String,System.String)">
            <summary>		
            函数名:ReplaceParentWindow	
            功能描述:替换父窗口	
            </summary>
            <param name="parentWindowUrl">父窗口</param>
            <param name="caption">窗口提示</param>
            <param name="future">窗口特征参数</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ReplaceOpenerWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerWindow	
            功能描述:替换当前窗体的打开窗口	
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口</param>		
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ReplaceOpenerParentFrame(System.String,System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ReplaceOpenerParentWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.CloseParentWindow">
            <summary>		
            函数名:CloseParentWindow	
            功能描述:关闭窗口	
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.CloseOpenerWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ShowModalDialogJavascript(System.String)">
            <summary>
            函数名:ShowModalDialogJavascript	
            功能描述:返回打开模式窗口的脚本	
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ShowModalDialogWindow(System.String)">
            <summary>
            函数名:ShowModalDialogWindow	
            功能描述:打开模式窗口	
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="webFormUrl"></param>
            <param name="top"></param>
            <param name="left"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.SetHtmlElementValue(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="formName"></param>
            <param name="elementName"></param>
            <param name="elementValue"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogAlert(System.String)">
            <summary>
            提示消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogAlertAndRedirect(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="toURL"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogCconfirm(System.String)">
            <summary>
            询问消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpen(System.String,System.String)">
            <summary>
            普通窗口
            </summary>
            <param name="pURL">URL</param>
            <param name="pTitle">标题</param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpen(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            自定义窗口
            </summary>
            <param name="pURL"></param>
            <param name="pTitle"></param>
            <param name="pWidth"></param>
            <param name="pHeight"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpen(System.String,System.String,System.String,System.String)">
            <summary>
            带说明栏的窗口
            </summary>
            <param name="pMessagetitle"></param>
            <param name="pMessage"></param>
            <param name="pTitle"></param>
            <param name="pURL"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenNoCover(System.String,System.String)">
            <summary>
            无遮罩窗口
            </summary>
            <param name="url"></param>
            <param name="title"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenMp(System.String,System.String)">
            <summary>
            全屏窗口
            </summary>
            <param name="url"></param>
            <param name="title"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenByInnerHtml(System.String,System.String)">
            <summary>
            内容为文本或者HTML
            </summary>
            <param name="innerhtml"></param>
            <param name="title"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenByLocation(System.String,System.String)">
            <summary>
            指定弹出位置
            </summary>
            <param name="url"></param>
            <param name="title"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenByAutoClose(System.String,System.String)">
            <summary>
            自动关闭
            </summary>
            <param name="url"></param>
            <param name="title"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript.DialogOpenByOKEvent(System.String,System.String,System.String)">
            <summary>
            确定按钮事件
            </summary>
            <param name="innerhtml"></param>
            <param name="title"></param>
            <param name="enventname"></param>
        </member>
        <member name="M:Enterprise.Framework.Web.JScript._Dialog(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Enterprise.Framework.Web.StringUtil">
            <summary>
            字符串操作工具集
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.CountSpace(System.String)">
            <summary>
            计算空格
            </summary>
            <param name="countStr">类型PATH</param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.Remove(System.String,System.String)">
            <summary>
            从字符串中的尾部删除指定的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="removedString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.RightSplit(System.String,System.Char)">
            <summary>
            获取拆分符右边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.LeftSplit(System.String,System.Char)">
            <summary>
            获取拆分符左边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.DelLastComma(System.String)">
            <summary>
            去掉最后一个逗号
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.DeleteUnVisibleChar(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetArrayString(System.String[])">
            <summary>
            获取数组元素的合并字符串
            </summary>
            <param name="stringArray"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetStringCount(System.String[],System.String)">
            <summary>
            	获取某一字符串在字符串数组中出现的次数
            </summary>
            <param name="stringArray" type="string[]">
                <para>
                    
                </para>
            </param>
            <param name="findString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetStringCount(System.String,System.String)">
            <summary>
                获取某一字符串在字符串中出现的次数
            </summary>
            <param name="sourceString"></param>
            <param name="findString" type="string">
                <para>
                    匹配字符串
                </para>
            </param>
            <returns>
                匹配字符串数量
            </returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetSubString(System.String,System.String)">
            <summary>
            截取从startString开始到原字符串结尾的所有字符   
            </summary>
            <param name="sourceString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="startString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetSubString(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceString"></param>
            <param name="beginRemovedString"></param>
            <param name="endRemovedString"></param>
            <returns></returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetByteCount(System.String)">
            <summary>
            按字节数取出字符串的长度
            </summary>
            <param name="strTmp">要计算的字符串</param>
            <returns>字符串的字节数</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.StringUtil.GetByteIndex(System.Int32,System.String)">
            <summary>
            按字节数要在字符串的位置
            </summary>
            <param name="intIns">字符串的位置</param>
            <param name="strTmp">要计算的字符串</param>
            <returns>字节的位置</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.WebServiceHelper.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="classname"></param>
            <param name="methodname"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Enterprise.Framework.Web.WebUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetFileContentsRemote(System.String)">
            <summary>
            Get a remote web file.
            </summary>
            <param name="file">The remote URL</param>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetFileContentsLocal(System.String)">
            <summary>
            Retrieve local file contents.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetContentOfFile(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>String with file contents.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetContentOfFileAsBytes(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>Byte array with file contents.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetContentOfFileAsBytes(System.Web.HttpPostedFileBase)">
            <summary>
            Get the content of an upload file as a string.
            </summary>
            <param name="inputFile">Path to input file.</param>
            <returns>Byte array with file contents.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetFileExtension(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Gets the file extension of the file.
            </summary>
            <param name="inputFile">Path to file.</param>
            <returns>File extension.</returns>
        </member>
        <member name="M:Enterprise.Framework.Web.WebUtils.GetFileExtensionAsFormat(System.Web.UI.HtmlControls.HtmlInputFile)">
            <summary>
            Get the file extension as a image format.
            </summary>
            <param name="inputFile">Path to image file.</param>
            <returns>The format of the image file.</returns>
        </member>
        <member name="T:Enterprise.Framework.Web.WebSecurityUtils">
            <summary>
            Security util.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Web.WebSecurityUtils.IsSelfRequest(System.Web.HttpContext,System.String@,System.String)">
            <summary>
            Determines if the request being made is from the same host.
            Otherwise, most likely someone is leeching the image.
            </summary>
            <param name="requestDeniedImagePath">"~/images/backoff.gif"</param>
            <param name="ctx">Current http contenxt.</param>
            <param name="path">Physical path.</param>
            <returns>True of is being made from the same host.</returns>
        </member>
        <member name="T:Enterprise.Framework.Xml.XmlSerializerUtil">
            <summary>
            Serializes an object to xml.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlSerializerUtil.XmlSerialize``1(``0)">
            <summary>
            Serialize the object to xml.
            </summary>
            <typeparam name="T">Type of object to serialize.</typeparam>
            <param name="item">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlSerializerUtil.XmlSerialize(System.Object)">
            <summary>
            Serialize the object to xml.
            </summary>
            <param name="item">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlSerializerUtil.XmlDeserialize``1(System.String)">
            <summary>
            Deserialize from xml to the appropriate typed object.
            </summary>
            <typeparam name="T">Type of object to deserialize.</typeparam>
            <param name="xmlData">XML contents with serialized object.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:Enterprise.Framework.Xml.XmlUtils">
            <summary>
            Static Xml related utility functions.
            </summary>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.#ctor">
             <summary>
            Default constructor.
             </summary>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.LoadXMLFromFile(System.String)">
            <summary>
            This takes a file path and return an xmldocument
            </summary>
            <param name="file">File path.</param>
            <returns>Loaded XML document.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.RemoveAllChildrenFrom(System.Xml.XmlNode)">
            <summary>
            Remove all children (but not attributes) from specified node
            </summary>
            <param name="n">Node to remove children from</param>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Throws an Exception if attrName_ does not exist.
            </summary>
            <param name="xNav">Instance of XPath navigator.</param>
            <param name="attrName">Attribute name.</param>
            <returns>Attribute Value.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Gets the attribute value for the Current node of xNav_. Returns defaultValue if attrName_ does not exist.
            </summary>
            <param name="xNav">Instance of XPath navigator.</param>
            <param name="attrName">Attribute name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.FragmentToNode(System.String)">
            <summary>
            Convert a fragment of xml to an xml node
            </summary>
            <param name="xmlFragment">An xml fragment starting with an outer element</param>
            <returns>A node on a new xml document</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.EscapeXml(System.String)">
            <summary>
            Escapes xml.
            </summary>
            <param name="xml">XML content string to escape.</param>
            <returns>Escaped XML content.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.FormatNicely(System.String)">
            <summary>
            Pretty Print the input XML string, such as adding indentations to each level of elements
            and carriage return to each line
            </summary>
            <param name="xmlText">XML content.</param>
            <returns>New formatted XML string</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.TransformXml(System.IO.TextReader,System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Transforms the XML.
            </summary>
            <param name="inXml">The in XML.</param>
            <param name="styleSheet">The style sheet.</param>
            <param name="outXml">The out XML.</param>
            <returns>Transformed XML.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.TransformXml(System.String,System.String)">
            <summary>
            Generates html by transforming the xml to html
            using xsl file specified.
            </summary>
            <param name="xmlToTransform">The xml to transform to html.</param>
            <param name="pathToXsl">The path to the xsl file to use for
            the transformation.</param>
            <returns>An html string if correctly transformed, or an empty string
            if there was some error.</returns>
        </member>
        <member name="M:Enterprise.Framework.Xml.XmlUtils.Serialize(System.Object)">
            <summary>
            Serializes an object to xml using the XmlSerialization.
            The obj must have the xml attributes used for serialization.
            </summary>
            <param name="obj">Object to serialize.</param>
            <returns>XML contents representing the serialized object.</returns>
        </member>
    </members>
</doc>
